@if (IsVisible)
{
    <div class="modal-backdrop fade show"></div>
    <div class="modal fade show" tabindex="-1" style="display: block;">
        <div class="modal-dialog @SizeClass">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">@Title</h5>
                    <button type="button" class="btn-close" @onclick="async () => await OnClose.InvokeAsync()"></button>
                </div>
                <div class="modal-body">
                    @Body
                </div>
                @if (Footer != null)
                {
                    <div class="modal-footer">
                        @Footer
                    </div>
                }
            </div>
        </div>
    </div>
}

@code {
    [Parameter]
    public bool IsVisible { get; set; }

    [Parameter]
    public EventCallback OnClose { get; set; }

    [Parameter]
    public string Title { get; set; } = "Modal Title";

    [Parameter, EditorRequired]
    public RenderFragment Body { get; set; } = default!;

    [Parameter]
    public RenderFragment? Footer { get; set; }

    [Parameter]
    public ModalSize Size { get; set; } = ModalSize.Default;

    private string? SizeClass => Size switch
    {
        ModalSize.Small => "modal-sm",
        ModalSize.Large => "modal-lg",
        ModalSize.ExtraLarge => "modal-xl",
        ModalSize.Scrollable => "modal-dialog-scrollable",
        _ => null
    };

    public enum ModalSize { Default, Small, Large, ExtraLarge, Scrollable }
}