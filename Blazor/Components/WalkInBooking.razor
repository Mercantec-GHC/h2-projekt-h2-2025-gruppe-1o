@using DomainModels.DTOs
@using DomainModels.Enums
@using System.Globalization

@inject APIService ApiService

<PageHeader Title="Dagens Status & Walk-in Booking" Subtitle="Få et hurtigt overblik over ledige værelser og opret bookinger for walk-in gæster." />

@if (AvailableRoomTypes == null)
{
    <p><em>Indlæser værelsesstatus...</em></p>
}
else
{
    <div class="row g-4">
        @foreach (var roomType in AvailableRoomTypes)
        {
            <div class="col-md-4">
                <div class="card h-100 shadow-sm admin-room-card" @onclick="() => SelectRoomTypeForWalkIn(roomType)">
                    <img src="@ImageHelper.GetRoomImagePath(roomType.Name)" class="card-img-top" alt="@roomType.Name" />
                    <div class="card-body">
                        <h5 class="card-title">@roomType.Name</h5>
                        <p class="card-text text-success fw-bold">@roomType.AvailableCount ledige værelser</p>
                    </div>
                    <div class="card-footer">
                        <small class="text-muted">Klik for at oprette walk-in booking</small>
                    </div>
                </div>
            </div>
        }
    </div>
}

@if (_selectedRoomTypeForWalkIn is not null)
{
    <div class="card shadow-sm mt-4 walk-in-form">
        <div class="card-header">
            <div class="d-flex justify-content-between align-items-center">
                <h4 class="mb-0">Opret Walk-in Booking for: @_selectedRoomTypeForWalkIn.Name</h4>
                <button class="btn-close" @onclick="CancelWalkIn"></button>
            </div>
        </div>
        <div class="card-body">
            @if (_lastCreatedBooking is not null)
            {
                <div class="text-center p-4">
                    <i class="bi bi-check-circle-fill text-success" style="font-size: 3rem;"></i>
                    <h3 class="mt-3">Booking Gennemført!</h3>
                    <p>Booking til <strong>@_lastCreatedBooking.UserFullName</strong> er nu oprettet.</p>
                    <p>Booking ID: <strong>#@_lastCreatedBooking.Id.Substring(0, 6).ToUpper()</strong></p>
                    <ActionButton Type="ActionButton.ButtonType.Secondary" OnClick="ResetWalkInForm">Opret ny walk-in booking</ActionButton>
                </div>
            }
            else
            {
                <EditForm Model="_walkInBooking" OnValidSubmit="HandleWalkInSubmit" Context="walkInFormContext">
                    <DataAnnotationsValidator />
                    <ValidationSummary class="text-danger" />
                    @if (!string.IsNullOrEmpty(_walkInStatusMessage))
                    {
                        <div class="alert @(_walkInSuccess ? "alert-success" : "alert-danger")">@_walkInStatusMessage</div>
                    }
                    <div class="row g-3">
                        <div class="col-md-6"><div class="form-group"><label>Fornavn</label><InputText class="form-control" @bind-Value="_walkInBooking.FirstName" /></div></div>
                        <div class="col-md-6"><div class="form-group"><label>Efternavn</label><InputText class="form-control" @bind-Value="_walkInBooking.LastName" /></div></div>
                        <div class="col-md-6"><div class="form-group"><label>Email</label><InputText type="email" class="form-control" @bind-Value="_walkInBooking.Email" /></div></div>
                        <div class="col-md-6"><div class="form-group"><label>Telefon</label><InputText class="form-control" @bind-Value="_walkInBooking.PhoneNumber" /></div></div>
                        <div class="col-md-4"><div class="form-group"><label>Check-in</label><InputDate class="form-control" @bind-Value="_walkInBooking.CheckInDate" /></div></div>
                        <div class="col-md-4"><div class="form-group"><label>Check-ud</label><InputDate class="form-control" @bind-Value="_walkInBooking.CheckOutDate" /></div></div>
                        <div class="col-md-4"><div class="form-group"><label>Antal Gæster</label><InputNumber class="form-control" @bind-Value="_walkInBooking.GuestCount" min="1" /></div></div>
                    </div>

                    @if (_selectedRoomTypeDetails is not null)
                    {
                        <hr class="my-4" />
                        <ServiceSelector Services="_selectedRoomTypeDetails.Services" @bind-SelectedServiceIds="_walkInBooking.ServiceIds" />
                    }

                    <div class="d-flex justify-content-between align-items-center mt-4">
                        <h4 class="mb-0">Totalpris: <strong>@CalculateTotalPrice().ToString("C0", _danishCulture)</strong></h4>
                        <ActionButton Type="ActionButton.ButtonType.Primary" IsSubmit="true">Opret Booking</ActionButton>
                    </div>
                </EditForm>
            }
        </div>
    </div>
}

@code {
    @* --- FORKLARING ---
    - Fjernet al markup og logik for visning og valg af services.
    - Anvender nu den nye `<ServiceSelector>` component, som får services ind og to-vejs-binder de valgte IDs direkte til `_walkInBooking.ServiceIds`.
    - Metoden `ToggleServiceSelection` er fjernet, da den logik nu bor i `ServiceSelector`.
    --- *@

    [Parameter]
    public List<RoomTypeCardDto>? AvailableRoomTypes { get; set; }

    [Parameter]
    public EventCallback OnBookingCreated { get; set; }

    private WalkInBookingDto _walkInBooking = new();
    private RoomTypeCardDto? _selectedRoomTypeForWalkIn;
    private RoomTypeDetailDto? _selectedRoomTypeDetails;

    private string? _walkInStatusMessage;
    private bool _walkInSuccess;
    private BookingGetDto? _lastCreatedBooking;

    private readonly CultureInfo _danishCulture = new("da-DK");

    private async Task SelectRoomTypeForWalkIn(RoomTypeCardDto roomType)
    {
        ResetWalkInForm();
        _selectedRoomTypeForWalkIn = roomType;
        _selectedRoomTypeDetails = await ApiService.GetRoomTypeByIdAsync(roomType.Id);
        _walkInBooking = new WalkInBookingDto
        {
            RoomTypeId = roomType.Id,
            CheckInDate = DateTime.Today,
            CheckOutDate = DateTime.Today.AddDays(1),
            GuestCount = 1,
            ServiceIds = new List<int>()
        };
    }

    private void CancelWalkIn()
    {
        _selectedRoomTypeForWalkIn = null;
        _selectedRoomTypeDetails = null;
        _lastCreatedBooking = null;
    }

    private void ResetWalkInForm()
    {
        _walkInBooking = new();
        _walkInStatusMessage = null;
        _lastCreatedBooking = null;
    }

    private async Task HandleWalkInSubmit()
    {
        _walkInStatusMessage = "Opretter booking...";
        StateHasChanged();
        var (success, message, newBooking) = await ApiService.CreateWalkInBookingAsync(_walkInBooking);
        _walkInSuccess = success;
        if (success && newBooking != null)
        {
            _lastCreatedBooking = newBooking;
            _walkInStatusMessage = null;
            await OnBookingCreated.InvokeAsync();
        }
        else
        {
            _walkInStatusMessage = message;
        }
    }

    private decimal CalculateTotalPrice()
    {
        if (_selectedRoomTypeDetails == null) return 0;
        var nights = (_walkInBooking.CheckOutDate - _walkInBooking.CheckInDate).Days;
        if (nights <= 0) return 0;
        var roomPrice = _selectedRoomTypeDetails.BasePrice * nights;
        var servicesPrice = _selectedRoomTypeDetails.Services
            .Where(s => _walkInBooking.ServiceIds.Contains(s.Id))
            .Sum(s =>
            {
                Enum.TryParse(s.BillingType, out BillingType billingType);
                return billingType switch
                {
                    BillingType.PerNight => s.Price * nights,
                    BillingType.PerPerson => s.Price * _walkInBooking.GuestCount,
                    BillingType.PerPersonPerNight => s.Price * nights * _walkInBooking.GuestCount,
                    _ => s.Price
                };
            });
        return roomPrice + servicesPrice;
    }
}