@page "/support/ticket/{TicketId}"
@attribute [Authorize]
@inject APIService ApiService
@inject TicketSignalRService SignalRService
@inject IJSRuntime JSRuntime
@using System.Security.Claims
@using DomainModels.Enums
@implements IAsyncDisposable

<PageTitle>Support Sag: @(_ticket?.Title)</PageTitle>

@if (_ticket == null)
{
    <p><em>Indlæser sag...</em></p>
}
else
{
    <div class="ticket-chat-container">
        <div class="chat-header">
            <h3>@_ticket.Title (#@_ticket.Id.Substring(0, 6).ToUpper())</h3>
            <StatusBadge Status="@_ticket.Status" />
        </div>

        @if (_ticket.Status == TicketStatus.PendingClosure && !IsStaff)
        {
            <div class="closure-prompt">
                <p>En medarbejder har anmodet om at lukke denne sag. Er du enig i, at sagen er løst?</p>
                <div>
                    <button class="btn btn-success me-2" @onclick="() => HandleClosureResponse(true)">Ja, luk sagen</button>
                    <button class="btn btn-danger" @onclick="() => HandleClosureResponse(false)">Nej, jeg har stadig brug for hjælp</button>
                </div>
            </div>
        }

        <div class="chat-messages" id="chat-messages">
            <div class="message other-message">
                <div class="message-header">
                    <strong>@_ticket.CreatedByName</strong>
                    <span class="message-time">@_ticket.CreatedAt.ToString("g")</span>
                </div>
                <div class="message-content">
                    @_ticket.Description
                </div>
            </div>

            @foreach (var message in _ticket.Messages.OrderBy(m => m.CreatedAt))
            {
                if (!message.IsInternalNote || IsStaff)
                {
                    <div class="message @(IsOwnMessage(message.SenderId) ? "own-message" : "other-message") @(message.IsInternalNote ? "internal-note-message" : "")">
                        <div class="message-header">
                            <strong>@message.SenderName @(message.IsInternalNote ? "(Internt Notat)" : "")</strong>
                            <span class="message-time">@message.CreatedAt.ToString("g")</span>
                        </div>
                        <div class="message-content">@message.Content</div>
                    </div>
                }
            }
        </div>

        @if (_ticket.Status != TicketStatus.Closed && _ticket.Status != TicketStatus.PendingClosure)
        {
            <div class="chat-input">
                <EditForm Model="_newMessage" OnValidSubmit="HandleSendMessage">
                    <InputTextArea @bind-Value="_newMessage.Content" class="form-control" placeholder="Skriv din besked her..." />
                    @if (IsStaff)
                    {
                        <div class="form-check internal-note-toggle">
                            <InputCheckbox id="isInternal" @bind-Value="_newMessage.IsInternalNote" />
                            <label for="isInternal">Internt notat</label>
                        </div>
                    }
                    <button type="submit" class="btn btn-primary" disabled="@(!SignalRService.IsConnected || _isSending)">
                        @if (_isSending)
                        {
                            <span class="spinner-border spinner-border-sm"></span>
                        }
                        else
                        {
                            <span>Send</span>
                        }
                    </button>
                </EditForm>
            </div>
        }
    </div>

    @if (IsStaff && _ticket.Status != TicketStatus.Closed && _ticket.Status != TicketStatus.PendingClosure)
    {
        <div class="staff-actions">
            <ActionButton OnClick="RequestClosure">Anmod om at Lukke Sag</ActionButton>
        </div>
    }
}

@code {
    [Parameter]
    public string TicketId { get; set; } = string.Empty;

    [CascadingParameter]
    private Task<AuthenticationState> AuthStateTask { get; set; } = default!;

    private TicketDetailDto? _ticket;
    private TicketMessageCreateDto _newMessage = new();
    private ClaimsPrincipal? _user;
    private bool _isSending = false;

    private bool IsStaff => (_user?.IsInRole("Manager") ?? false) || (_user?.IsInRole("Receptionist") ?? false) || (_user?.IsInRole("Housekeeping") ?? false);

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthStateTask;
        _user = authState.User;

        var token = await ApiService.GetAuthTokenAsync();
        await SignalRService.StartConnectionAsync(token);
        SignalRService.OnMessageReceived += HandleMessageReceived;
        SignalRService.OnStatusChanged += HandleStatusChanged;

        _ticket = await ApiService.GetTicketByIdAsync(TicketId);

        if (_ticket != null)
        {
            await SignalRService.JoinTicketGroupAsync(TicketId);
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender && _ticket != null)
        {
            await JSRuntime.InvokeVoidAsync("scrollToEnd", "chat-messages");
        }
    }

    private async Task HandleSendMessage()
    {
        if (string.IsNullOrWhiteSpace(_newMessage.Content) || _isSending) return;

        _isSending = true;
        StateHasChanged();

        var result = await ApiService.PostMessageAsync(TicketId, _newMessage);
        if (result != null)
        {
            _newMessage.Content = string.Empty;
            _newMessage.IsInternalNote = false;
        }

        _isSending = false;
        StateHasChanged();
    }

    private async void HandleMessageReceived(TicketMessageDto message)
    {
        if (_ticket != null && !_ticket.Messages.Any(m => m.Id == message.Id))
        {
            _ticket.Messages.Add(message);
        }
        await InvokeAsync(StateHasChanged);
        await JSRuntime.InvokeVoidAsync("scrollToEnd", "chat-messages");
    }

    private void HandleStatusChanged(string ticketId, TicketStatus newStatus)
    {
        if (_ticket != null && _ticket.Id == ticketId)
        {
            _ticket.Status = newStatus;
            InvokeAsync(StateHasChanged);
        }
    }

    private async Task RequestClosure()
    {
        var statusUpdateDto = new TicketStatusUpdateDto { NewStatus = TicketStatus.Closed };
        await ApiService.UpdateTicketStatusAsync(TicketId, statusUpdateDto);
    }

    private async Task HandleClosureResponse(bool userAgreesToClose)
    {
        var newStatus = userAgreesToClose ? TicketStatus.Closed : TicketStatus.PendingSupportReply;
        var statusUpdateDto = new TicketStatusUpdateDto { NewStatus = newStatus };
        await ApiService.UpdateTicketStatusAsync(TicketId, statusUpdateDto);
    }

    private bool IsOwnMessage(string senderId)
    {
        var currentUserId = _user?.FindFirst(ClaimTypes.NameIdentifier)?.Value;
        return senderId == currentUserId;
    }

    public async ValueTask DisposeAsync()
    {
        if (!string.IsNullOrEmpty(TicketId))
        {
            await SignalRService.LeaveTicketGroupAsync(TicketId);
        }
        SignalRService.OnMessageReceived -= HandleMessageReceived;
        SignalRService.OnStatusChanged -= HandleStatusChanged;
    }
}