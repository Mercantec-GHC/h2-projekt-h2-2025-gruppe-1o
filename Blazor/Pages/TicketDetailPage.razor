@page "/support/ticket/{TicketId}"
@attribute [Authorize]
@inject APIService ApiService
@inject TicketSignalRService SignalRService
@inject IJSRuntime JSRuntime
@using System.Security.Claims
@using DomainModels.Enums
@implements IAsyncDisposable

<PageTitle>Support Sag: @(_ticket?.Title)</PageTitle>

@if (_ticket == null)
{
    <p><em>Indlæser sag...</em></p>
}
else
{
    <AuthorizeView Roles="Manager,Receptionist,Housekeeping">
        <div class="card bg-light mb-4">
            <div class="card-body d-flex justify-content-between align-items-center">
                <div>
                    <label for="status-select" class="form-label fw-bold">Håndter Sag</label>
                    <select id="status-select" class="form-select w-auto d-inline-block" @bind="_selectedStatus">
                        @foreach (var status in Enum.GetValues<TicketStatus>())
                        {
                            <option value="@status">@status</option>
                        }
                    </select>
                </div>
                <button class="btn btn-secondary" @onclick="HandleStatusUpdate">Opdater Status</button>
            </div>
        </div>
    </AuthorizeView>
    <div class="ticket-chat-container">
        <div class="chat-header">
            <h3>@_ticket.Title (#@_ticket.Id.Substring(0, 6).ToUpper())</h3>
            <span class="badge @GetStatusClass(_ticket.Status)">@_ticket.Status</span>
        </div>

        <div class="chat-messages" id="chat-messages">
            @foreach (var message in _ticket.Messages.OrderBy(m => m.CreatedAt))
            {
                <div class="message @(IsOwnMessage(message.SenderId) ? "own-message" : "other-message")">
                    <div class="message-header">
                        <strong>@message.SenderName</strong>
                        <span class="message-time">@message.CreatedAt.ToString("g")</span>
                    </div>
                    <div class="message-content">@message.Content</div>
                </div>
            }
        </div>

        <div class="chat-input">
            <EditForm Model="_newMessage" OnValidSubmit="HandleSendMessage">
                <InputTextArea @bind-Value="_newMessage.Content" class="form-control" placeholder="Skriv din besked her..." />
                <button type="submit" class="btn btn-primary" disabled="@(!SignalRService.IsConnected)">Send</button>
            </EditForm>
        </div>
    </div>
}

@code {
    [Parameter]
    public string TicketId { get; set; } = string.Empty;

    [CascadingParameter]
    private Task<AuthenticationState> AuthStateTask { get; set; } = default!;

    private TicketDetailDto? _ticket;
    private TicketMessageCreateDto _newMessage = new();
    private ClaimsPrincipal? _user;

    // NY VARIABEL til at binde til dropdown
    private TicketStatus _selectedStatus;

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthStateTask;
        _user = authState.User;

        var token = await ApiService.GetAuthTokenAsync();
        await SignalRService.StartConnectionAsync(token);
        SignalRService.OnMessageReceived += HandleMessageReceived;

        // NY LINJE: Tilmeld dig det nye event for statusændringer
        SignalRService.OnStatusChanged += HandleStatusChanged;

        _ticket = await ApiService.GetTicketByIdAsync(TicketId);
        if (_ticket != null)
        {
            // NY LINJE: Sæt den valgte status til sagens nuværende status
            _selectedStatus = _ticket.Status;
            await SignalRService.JoinTicketGroupAsync(TicketId);
        }
    }

    // ==================================================
    // NY METODE START: Håndterer klik på "Opdater Status"
    // ==================================================
    private async Task HandleStatusUpdate()
    {
        if (_ticket == null) return;

        var statusUpdateDto = new TicketStatusUpdateDto { NewStatus = _selectedStatus };
        var success = await ApiService.UpdateTicketStatusAsync(TicketId, statusUpdateDto);

        // Vi behøver ikke gøre mere her, da SignalR klarer UI-opdateringen for os.
    }
    // ==================================================
    // NY METODE SLUT
    // ==================================================


    // ==================================================
    // NY METODE START: Modtager live-opdatering fra SignalR
    // ==================================================
    private void HandleStatusChanged(string ticketId, TicketStatus newStatus)
    {
        if (_ticket != null && _ticket.Id == ticketId)
        {
            _ticket.Status = newStatus;
            _selectedStatus = newStatus;
            InvokeAsync(StateHasChanged);
        }
    }
    // ==================================================
    // NY METODE SLUT
    // ==================================================

    private async Task HandleSendMessage()
    {
        if (string.IsNullOrWhiteSpace(_newMessage.Content)) return;

        var result = await ApiService.PostMessageAsync(TicketId, _newMessage);
        if (result != null)
        {
            _newMessage.Content = string.Empty;
            await InvokeAsync(StateHasChanged);
        }
    }

    private async void HandleMessageReceived(TicketMessageDto message)
    {
        if (_ticket != null && !_ticket.Messages.Any(m => m.Id == message.Id))
        {
            _ticket.Messages.Add(message);
        }

        await InvokeAsync(StateHasChanged);
        await JSRuntime.InvokeVoidAsync("scrollToEnd", "chat-messages");
    }

    private bool IsOwnMessage(string senderId)
    {
        if (_user == null) return false;
        var currentUserId = _user.FindFirst(ClaimTypes.NameIdentifier)?.Value;
        return senderId == currentUserId;
    }

    private string GetStatusClass(DomainModels.Enums.TicketStatus status) => status switch
    {
        DomainModels.Enums.TicketStatus.Open => "bg-success",
        DomainModels.Enums.TicketStatus.InProgress => "bg-info",
        DomainModels.Enums.TicketStatus.PendingCustomerReply => "bg-warning text-dark",
        DomainModels.Enums.TicketStatus.Closed => "bg-secondary",
        _ => "bg-dark"
    };

    public async ValueTask DisposeAsync()
    {
        if (!string.IsNullOrEmpty(TicketId))
        {
            await SignalRService.LeaveTicketGroupAsync(TicketId);
        }
        SignalRService.OnMessageReceived -= HandleMessageReceived;

        // NY LINJE: Ryd op i det nye event-abonnement
        SignalRService.OnStatusChanged -= HandleStatusChanged;
    }
}