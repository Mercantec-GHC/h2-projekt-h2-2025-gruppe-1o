@page "/support/ticket/{TicketId}"
@attribute [Authorize]
@inject APIService ApiService
@inject TicketSignalRService SignalRService
@inject IJSRuntime JSRuntime
@using System.Security.Claims
@using DomainModels.Enums
@implements IAsyncDisposable

<PageTitle>Support Sag: @(_ticket?.Title)</PageTitle>

@if (_isLoading)
{
    <p><em>Indlæser sag...</em></p>
}
else if (_ticket != null)
{
    @if (_ticket.Status == TicketStatus.PendingClosure && IsOwner())
    {
        <div class="modal-overlay">
            <div class="modal-content card">
                <div class="card-body text-center">
                    <h4 class="card-title">Bekræft Lukning af Sag</h4>
                    <p>En medarbejder har markeret denne sag som løst. Er du enig i, at sagen kan lukkes?</p>
                    <div class="d-flex justify-content-center mt-4">
                        <button class="btn btn-success me-3" @onclick="() => HandleClosureResponse(true)">Ja, luk sagen</button>
                        <button class="btn btn-danger" @onclick="() => HandleClosureResponse(false)">Nej, sagen er ikke løst</button>
                    </div>
                </div>
            </div>
        </div>
    }

    <AuthorizeView Roles="Manager,Receptionist,Housekeeping">
        <div class="card bg-light mb-4">
            <div class="card-body d-flex justify-content-between align-items-center">
                <div>
                    <label for="status-select" class="form-label fw-bold">Håndter Sag</label>
                    <select id="status-select" class="form-select w-auto d-inline-block" @bind="_selectedStatus">
                        @foreach (var status in Enum.GetValues<TicketStatus>())
                        {
                            if (status != TicketStatus.PendingClosure)
                            {
                                <option value="@status">@status</option>
                            }
                        }
                    </select>
                </div>
                <button class="btn btn-secondary" @onclick="HandleStatusUpdate">Opdater Status</button>
            </div>
        </div>
    </AuthorizeView>

    <div class="ticket-chat-container">
        <div class="chat-header">
            <h3>@_ticket.Title (#@_ticket.Id.Substring(0, 6).ToUpper())</h3>
            <span class="badge @GetStatusClass(_ticket.Status)">@_ticket.Status</span>
        </div>

        <div class="card my-3">
            <div class="card-header bg-white">
                <strong>Oprindelig Henvendelse</strong>
                <span class="text-muted float-end">fra @_ticket.CreatedByName</span>
            </div>
            <div class="card-body">
                <p class="card-text">@_ticket.Description</p>
            </div>
        </div>

        <div class="chat-messages" id="chat-messages">
            @foreach (var message in _ticket.Messages.OrderBy(m => m.CreatedAt))
            {
                <div class="message @(IsOwnMessage(message.SenderId) ? "own-message" : "other-message")">
                    <div class="message-header">
                        <strong>@message.SenderName</strong>
                        <span class="message-time">@message.CreatedAt.ToString("g")</span>
                    </div>
                    <div class="message-content">@message.Content</div>
                </div>
            }
        </div>

        <div class="chat-input">
            @if (_ticket.Status != TicketStatus.Closed && _ticket.Status != TicketStatus.PendingClosure)
            {
                <EditForm Model="_newMessage" OnValidSubmit="HandleSendMessage">
                    <InputTextArea @bind-Value="_newMessage.Content" class="form-control" placeholder="Skriv dit svar her..." />
                    <button type="submit" class="btn btn-primary" disabled="@(!SignalRService.IsConnected)">Send</button>
                </EditForm>
            }
            else
            {
                <div class="alert alert-secondary text-center" role="alert">
                    @if (_ticket.Status == TicketStatus.Closed)
                    {
                        <span>Denne sag er lukket.</span>
                    }
                    else
                    {
                        <span>Sagen afventer din bekræftelse for at blive lukket.</span>
                    }
                </div>
            }
        </div>
    </div>
}
else
{
    <p class="text-danger">Kunne ikke finde sagen. Den er muligvis blevet slettet.</p>
}


@code {
    [Parameter]
    public string TicketId { get; set; } = string.Empty;

    [CascadingParameter]
    private Task<AuthenticationState> AuthStateTask { get; set; } = default!;

    private ClaimsPrincipal? _user;
    private TicketDetailDto? _ticket;
    private TicketMessageCreateDto _newMessage = new();
    private TicketStatus _selectedStatus;
    private bool _isLoading = true;

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthStateTask;
        _user = authState.User;

        var token = await ApiService.GetAuthTokenAsync();
        await SignalRService.StartConnectionAsync(token);
        SignalRService.OnMessageReceived += HandleMessageReceived;
        SignalRService.OnStatusChanged += HandleStatusChanged;

        _ticket = await ApiService.GetTicketByIdAsync(TicketId);
        if (_ticket != null)
        {
            _selectedStatus = _ticket.Status;
            await SignalRService.JoinTicketGroupAsync(TicketId);
        }
        _isLoading = false;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (_ticket != null)
        {
            await JSRuntime.InvokeVoidAsync("scrollToEnd", "chat-messages");
        }
    }

    private async Task HandleStatusUpdate()
    {
        if (_ticket == null) return;
        var statusUpdateDto = new TicketStatusUpdateDto { NewStatus = _selectedStatus };
        await ApiService.UpdateTicketStatusAsync(TicketId, statusUpdateDto);
    }

    private async Task HandleClosureResponse(bool userAgreesToClose)
    {
        var newStatus = userAgreesToClose ? TicketStatus.Closed : TicketStatus.PendingSupportReply;
        var statusUpdateDto = new TicketStatusUpdateDto { NewStatus = newStatus };
        await ApiService.UpdateTicketStatusAsync(TicketId, statusUpdateDto);
    }

    private void HandleStatusChanged(string ticketId, TicketStatus newStatus)
    {
        if (_ticket != null && _ticket.Id == ticketId)
        {
            _ticket.Status = newStatus;
            _selectedStatus = newStatus;
            InvokeAsync(StateHasChanged);
        }
    }

    private async Task HandleSendMessage()
    {
        if (string.IsNullOrWhiteSpace(_newMessage.Content) || _ticket == null) return;

        var result = await ApiService.PostMessageAsync(TicketId, _newMessage);
        if (result != null)
        {
            _newMessage.Content = string.Empty;
        }
    }

    private async void HandleMessageReceived(TicketMessageDto message)
    {
        if (_ticket != null && !_ticket.Messages.Any(m => m.Id == message.Id))
        {
            _ticket.Messages.Add(message);
        }

        await InvokeAsync(StateHasChanged);
        await JSRuntime.InvokeVoidAsync("scrollToEnd", "chat-messages");
    }

    private bool IsOwner()
    {
        if (_user == null || _ticket == null) return false;

        var userId = _user.FindFirst(ClaimTypes.NameIdentifier)?.Value;
        return _ticket.CreatedByName == _user.Identity?.Name;
    }

    private bool IsOwnMessage(string senderId)
    {
        if (_user == null) return false;

        var currentUserId = _user.FindFirst(ClaimTypes.NameIdentifier)?.Value;
        return senderId == currentUserId;
    }

    private string GetStatusClass(DomainModels.Enums.TicketStatus status) => status switch
    {
        DomainModels.Enums.TicketStatus.Open => "bg-success",
        DomainModels.Enums.TicketStatus.PendingSupportReply => "bg-info",
        DomainModels.Enums.TicketStatus.PendingCustomerReply => "bg-warning text-dark",
        DomainModels.Enums.TicketStatus.PendingClosure => "bg-danger",
        DomainModels.Enums.TicketStatus.Closed => "bg-secondary",
        _ => "bg-dark"
    };

    public async ValueTask DisposeAsync()
    {
        if (!string.IsNullOrEmpty(TicketId))
        {
            await SignalRService.LeaveTicketGroupAsync(TicketId);
        }
        SignalRService.OnMessageReceived -= HandleMessageReceived;
        SignalRService.OnStatusChanged -= HandleStatusChanged;
    }
}