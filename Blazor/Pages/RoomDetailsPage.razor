@page "/room/{id:int}"
@using System.Globalization
@using System.Net
@using Blazor.Components
@using Blazor.Models
@using DomainModels
@using DomainModels.DTOs
@using Microsoft.AspNetCore.WebUtilities

@inject APIService ApiService
@inject NavigationManager Navigation

<PageTitle>@_roomType?.Name</PageTitle>

@if (_isLoading)
{
    <p><em>Indlæser værelsesdetaljer...</em></p>
}
else if (_roomType != null)
{
    <div class="room-details-container">
        <div class="room-gallery">
            <img src="@ImageHelper.GetRoomImagePath(_roomType.Name)" alt="@_roomType.Name" />
        </div>
        <div class="room-info">
            <h1>@_roomType.Name</h1>
            <p class="room-price">Fra <strong>@_roomType.BasePrice.ToString("C0", _danishCulture)</strong> / nat</p>

            <p class="room-description">@_roomType.LongDescription</p>

            <hr />

            @if (_hasPreselectedDates)
            {
                <ServiceSelector Services="_roomType.Services" @bind-SelectedServiceIds="_selectedServiceIds" />

                <hr />

                <div class="booking-confirm-box">
                    <h3 class="form-title">Gennemfør din booking</h3>
                    <p><strong>Periode:</strong> @_searchQuery.CheckInDate?.ToString("d. MMM") - @_searchQuery.CheckOutDate?.ToString("d. MMM yyyy")</p>
                    <p><strong>Antal gæster:</strong> @_searchQuery.GuestCount</p>
                    <hr>
                    <p class="total-price"><strong>Totalpris: @CalculateTotalPrice().ToString("C0", _danishCulture)</strong></p>

                    <AuthorizeView>
                        <Authorized>
                            <ActionButton Type="ActionButton.ButtonType.Accent" OnClick="HandleConfirmBooking">Book Nu</ActionButton>
                        </Authorized>
                        <NotAuthorized>
                            <div class="d-grid gap-2">
                                <p class="text-center mb-2 text-muted">Du skal være logget ind for at booke.</p>
                                <ActionButton Type="ActionButton.ButtonType.Primary" OnClick="GoToLogin">Log Ind</ActionButton>
                                <ActionButton Type="ActionButton.ButtonType.Secondary" OnClick="GoToRegister">Opret Bruger</ActionButton>
                            </div>
                        </NotAuthorized>
                    </AuthorizeView>

                </div>
            }
            else
            {
                <BookingSearchForm SearchQueryModel="_searchQuery" RoomTypeId="Id" Title="Tjek ledighed for dette værelse" />
            }

            @if (!string.IsNullOrEmpty(_errorMessage))
            {
                <div class="alert alert-danger mt-3">@_errorMessage</div>
            }
        </div>
    </div>
}
else
{
    <p>Værelsestypen kunne ikke findes.</p>
}

@code {
    @* --- FORKLARING ---
    - Fjernet `@attribute [Authorize]`, så siden nu er offentligt tilgængelig.
    - I "Gennemfør din booking"-boksen er "Book Nu"-knappen nu pakket ind i en `<AuthorizeView>`.
    - Hvis brugeren er logget ind (`<Authorized>`), vises "Book Nu"-knappen.
    - Hvis brugeren ikke er logget ind (`<NotAuthorized>`), vises "Log Ind" og "Opret Bruger"-knapper i stedet.
    - Tilføjet metoderne `GoToLogin` og `GoToRegister`, som sender brugeren videre med en `returnUrl`, så de kommer tilbage til denne side efter login/oprettelse.
    --- *@

    [Parameter]
    public int Id { get; set; }

    private readonly CultureInfo _danishCulture = new("da-DK");
    private RoomTypeDetailDto? _roomType;
    private SearchQuery _searchQuery = new();
    private bool _isLoading = true;
    private bool _hasPreselectedDates = false;
    private string? _errorMessage;

    private List<int> _selectedServiceIds = new();

    protected override async Task OnInitializedAsync()
    {
        _roomType = await ApiService.GetRoomTypeByIdAsync(Id);

        var uri = new Uri(Navigation.Uri);
        var queryParams = QueryHelpers.ParseQuery(uri.Query);

        if (queryParams.TryGetValue("checkin", out var checkinStr) &&
            queryParams.TryGetValue("checkout", out var checkoutStr) &&
            queryParams.TryGetValue("guests", out var guestsStr))
        {
            DateTime.TryParse(checkinStr, out var checkin);
            DateTime.TryParse(checkoutStr, out var checkout);
            int.TryParse(guestsStr, out var guests);

            _searchQuery.CheckInDate = checkin;
            _searchQuery.CheckOutDate = checkout;
            _searchQuery.GuestCount = guests;
            _hasPreselectedDates = true;
        }

        _isLoading = false;
    }

    private decimal CalculateTotalPrice()
    {
        if (_roomType == null || !_searchQuery.CheckInDate.HasValue || !_searchQuery.CheckOutDate.HasValue) return 0;
        var nights = (_searchQuery.CheckOutDate.Value - _searchQuery.CheckInDate.Value).Days;
        if (nights <= 0) return 0;

        var roomPrice = _roomType.BasePrice * nights;

        var servicesPrice = _roomType.Services
            .Where(s => _selectedServiceIds.Contains(s.Id))
            .Sum(s =>
            {
                return s.BillingType switch
                {
                    "PerNight" => s.Price * nights,
                    "PerPerson" => s.Price * _searchQuery.GuestCount,
                    "PerPersonPerNight" => s.Price * nights * _searchQuery.GuestCount,
                    _ => s.Price
                };
            });

        return roomPrice + servicesPrice;
    }

    private async Task HandleConfirmBooking()
    {
        _errorMessage = null;
        var bookingDetails = new BookingCreateDto
        {
            RoomTypeId = Id,
            CheckInDate = _searchQuery.CheckInDate.Value,
            CheckOutDate = _searchQuery.CheckOutDate.Value,
            ServiceIds = _selectedServiceIds,
            GuestCount = _searchQuery.GuestCount
        };
        var success = await ApiService.CreateBookingAsync(bookingDetails);
        if (success) Navigation.NavigateTo("/account");
        else _errorMessage = "Bookingen kunne ikke gennemføres. Værelset er muligvis blevet optaget i mellemtiden.";
    }

    private void GoToLogin()
    {
        var returnUrl = Uri.EscapeDataString(Navigation.Uri);
        Navigation.NavigateTo($"login?returnUrl={returnUrl}");
    }

    private void GoToRegister()
    {
        var returnUrl = Uri.EscapeDataString(Navigation.Uri);
        Navigation.NavigateTo($"register?returnUrl={returnUrl}");
    }
}