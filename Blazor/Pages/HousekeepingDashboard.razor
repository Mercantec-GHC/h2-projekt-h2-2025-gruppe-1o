@page "/housekeeping-dashboard"
@attribute [Authorize(Roles = "Housekeeping, Manager")]
@inject APIService ApiService
@inject TicketSignalRService SignalRService

<PageTitle>Housekeeping Dashboard</PageTitle>

<div class="container-fluid mt-4">
    <div class="dashboard-header mb-4">
        <h1>Housekeeping Dashboard</h1>
        <p class="text-muted">Overblik over værelser, der kræver rengøring.</p>
    </div>

    @if (_isLoading)
    {
        <p><em>Indlæser opgaver...</em></p>
    }
    else if (_roomsToClean != null)
    {
        <div class="card shadow-sm">
            <div class="card-header">
                <h3 class="mb-0">Værelser til Rengøring (@_roomsToClean.Count)</h3>
            </div>
            <div class="card-body">
                @if (!_roomsToClean.Any())
                {
                    <p class="text-center text-muted py-4">Godt arbejde! Der er ingen værelser, der afventer rengøring.</p>
                }
                else
                {
                    <div class="table-responsive">
                        <table class="table table-hover align-middle">
                            <thead>
                                <tr>
                                    <th>Værelse Nr.</th>
                                    <th>Type</th>
                                    <th class="text-end">Handlinger</th>
                                </tr>
                            </thead>
                            <tbody>
                                @foreach (var room in _roomsToClean)
                                {
                                    <tr>
                                        <td><strong>@room.RoomNumber</strong></td>
                                        <td>@room.RoomTypeName</td>
                                        <td class="text-end">
                                            <button class="btn btn-sm btn-success" @onclick="() => MarkAsClean(room.Id)">
                                                <i class="bi bi-check-lg me-1"></i> Markér som Ren
                                            </button>
                                        </td>
                                    </tr>
                                }
                            </tbody>
                        </table>
                    </div>
                }
            </div>
        </div>
    }
</div>

@code {
    private List<RoomGetDto>? _roomsToClean;
    private bool _isLoading = true;

    protected override async Task OnInitializedAsync()
    {
        await SignalRService.StartConnectionAsync(await ApiService.GetAuthTokenAsync());
        SignalRService.OnRoomStatusChanged += HandleRoomStatusChanged;

        await LoadRooms();
        _isLoading = false;
    }

    private async Task LoadRooms()
    {
        _roomsToClean = await ApiService.GetRoomsNeedingCleaningAsync();
        StateHasChanged();
    }

    private async Task MarkAsClean(int roomId)
    {
        var success = await ApiService.MarkRoomAsCleanAsync(roomId);
        if (success)
        {
            _roomsToClean?.RemoveAll(r => r.Id == roomId);
            StateHasChanged();
        }
    }

    private async void HandleRoomStatusChanged(int roomId, string newStatus)
    {
        await LoadRooms();
    }

    public void Dispose()
    {
        SignalRService.OnRoomStatusChanged -= HandleRoomStatusChanged;
    }
}