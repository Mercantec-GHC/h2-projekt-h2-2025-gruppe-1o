@page "/housekeeping-dashboard"
@attribute [Authorize(Roles = "Housekeeping, Manager")]
@using DomainModels.Enums
@inject APIService ApiService
@inject TicketSignalRService SignalRService
@implements IDisposable

<PageTitle>Housekeeping Dashboard</PageTitle>

<div class="housekeeping-dashboard">
    <PageHeader Title="Housekeeping Dashboard" Subtitle="Velkommen til housekeeping dashboardet" />

    <div class="dashboard-content">
        @if (_isLoading)
        {
            <p><em>Indlæser opgaver...</em></p>
        }
        else if (_roomsToClean != null)
        {
            <div class="row">
                <div class="col-md-8">
                    <div class="card">
                        <div class="card-header">
                            <h3>Dagens Opgaver</h3>
                        </div>
                        <div class="card-body">
                            @if (!_roomsToClean.Any())
                            {
                                <p class="text-center text-muted py-3">Godt arbejde! Der er ingen værelser, der afventer rengøring.</p>
                            }
                            else
                            {
                                <div class="task-list">
                                    @foreach (var room in _roomsToClean)
                                    {
                                        <div class="task-item">
                                            <span class="task-room">Værelse @room.RoomNumber (@room.RoomTypeName)</span>
                                            <div class="btn-group" role="group">
                                                <button class="btn btn-sm btn-warning" @onclick="() => OpenProblemModal(room)">
                                                    <i class="bi bi-exclamation-triangle-fill"></i> Rapportér Problem
                                                </button>
                                                <button class="btn btn-sm btn-success" @onclick="() => MarkAsClean(room.Id)">
                                                    <i class="bi bi-check-lg"></i> Markér som Færdig
                                                </button>
                                            </div>
                                        </div>
                                    }
                                </div>
                            }
                        </div>
                    </div>
                </div>
                <div class="col-md-4">
                    <div class="card">
                        <div class="card-header">
                            <h3>Status Oversigt</h3>
                        </div>
                        <div class="card-body">
                            <div class="status-grid">
                                <div class="status-item">
                                    <div class="status-number">@_roomsToClean.Count</div>
                                    <div class="status-label">Værelser at rengøre</div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            <div class="row mt-4">
                <div class="col-md-12">
                    <OpenTicketsList />
                </div>
            </div>
        }
    </div>
</div>

@* --- MODAL FOR PROBLEM-RAPPORTERING --- *@
@if (_showProblemModal)
{
    <div class="modal-backdrop fade show"></div>
    <div class="modal fade show" tabindex="-1" style="display: block;">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Rapportér Problem for Værelse @_selectedRoomForProblem?.RoomNumber</h5>
                    <button type="button" class="btn-close" @onclick="CloseProblemModal"></button>
                </div>
                <div class="modal-body">
                    <EditForm Model="_ticketCreateModel" OnValidSubmit="HandleReportProblemSubmit">
                        <DataAnnotationsValidator />
                        <ValidationSummary class="text-danger mb-3" />

                        @if (!string.IsNullOrEmpty(_problemReportStatusMessage))
                        {
                            <div class="alert alert-danger">@_problemReportStatusMessage</div>
                        }

                        <div class="mb-3">
                            <label class="form-label">Titel</label>
                            <InputText class="form-control" @bind-Value="_ticketCreateModel.Title" />
                        </div>
                        <div class="mb-3">
                            <label class="form-label">Beskrivelse af problemet</label>
                            <InputTextArea class="form-control" @bind-Value="_ticketCreateModel.Description" rows="4" />
                        </div>
                        <div class="modal-footer">
                            <button type="button" class="btn btn-secondary" @onclick="CloseProblemModal">Annuller</button>
                            <ActionButton Type="ActionButton.ButtonType.Primary" IsSubmit="true" Disabled="_isSubmittingProblem">
                                @if (_isSubmittingProblem)
                                {
                                    <span class="spinner-border spinner-border-sm me-1"></span>
                                }
                                Send Rapport
                            </ActionButton>
                        </div>
                    </EditForm>
                </div>
            </div>
        </div>
    </div>
}

@code {
    @* --- FORKLARING ---
    - Tilføjet en "Rapportér Problem"-knap til hvert værelse på listen.
    - Implementeret en modal-dialogboks, der vises, når knappen klikkes.
    - Tilføjet metoder (OpenProblemModal, CloseProblemModal, HandleReportProblemSubmit) til at håndtere modalens tilstand og formularindsendelse.
    - Ved indsendelse oprettes en ny `TicketCreateDto`, hvor kategorien automatisk sættes til `TicketCategory.Manager`.
    - `APIService.CreateTicketAsync` genbruges til at oprette sagen.
    --- *@

    private List<RoomGetDto>? _roomsToClean;
    private bool _isLoading = true;

    // Tilstandsvariabler for problem-rapportering
    private bool _showProblemModal = false;
    private RoomGetDto? _selectedRoomForProblem;
    private TicketCreateDto _ticketCreateModel = new();
    private bool _isSubmittingProblem = false;
    private string? _problemReportStatusMessage;

    protected override async Task OnInitializedAsync()
    {
        await SignalRService.StartConnectionAsync(await ApiService.GetAuthTokenAsync());
        SignalRService.OnRoomStatusChanged += HandleRoomStatusChanged;

        await LoadRooms();
        _isLoading = false;
    }

    private async Task LoadRooms()
    {
        _roomsToClean = await ApiService.GetRoomsNeedingCleaningAsync() ?? new List<RoomGetDto>();
        StateHasChanged();
    }

    private async Task MarkAsClean(int roomId)
    {
        var success = await ApiService.MarkRoomAsCleanAsync(roomId);
        if (success)
        {
            _roomsToClean?.RemoveAll(r => r.Id == roomId);
            StateHasChanged();
        }
    }

    private void OpenProblemModal(RoomGetDto room)
    {
        _selectedRoomForProblem = room;
        _ticketCreateModel = new TicketCreateDto
        {
            Title = $"Problem i Værelse {room.RoomNumber}",
            Description = "",
            Category = TicketCategory.Manager // Sættes automatisk til Manager
        };
        _problemReportStatusMessage = null;
        _showProblemModal = true;
        StateHasChanged();
    }

    private void CloseProblemModal()
    {
        _showProblemModal = false;
        _selectedRoomForProblem = null;
        _ticketCreateModel = new();
        _isSubmittingProblem = false;
    }

    private async Task HandleReportProblemSubmit()
    {
        if (_selectedRoomForProblem is null) return;

        _isSubmittingProblem = true;
        _problemReportStatusMessage = null;

        var createdTicket = await ApiService.CreateTicketAsync(_ticketCreateModel);

        if (createdTicket != null)
        {
            CloseProblemModal();
            // I en større applikation kunne man tilføje en "toast"-notifikation her for at bekræfte.
        }
        else
        {
            _problemReportStatusMessage = "Fejl: Kunne ikke oprette sag. Prøv venligst igen.";
            _isSubmittingProblem = false;
        }
        StateHasChanged();
    }

    private async void HandleRoomStatusChanged(int roomId, string newStatus)
    {
        await LoadRooms();
    }

    public void Dispose()
    {
        SignalRService.OnRoomStatusChanged -= HandleRoomStatusChanged;
    }
}