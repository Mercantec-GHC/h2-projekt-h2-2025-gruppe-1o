@page "/account"
@attribute [Authorize]
@using DomainModels.DTOs
@using System.Security.Claims

<PageTitle>Min Konto</PageTitle>

<div class="page-section">
    <h2 class="section-title">Min Konto</h2>
    <p class="section-subtitle">Velkommen, @user?.Identity?.Name! Her kan du administrere dine oplysninger og bookinger.</p>

    <div class="account-grid">
        <div class="account-card">
            <h3 class="card-title">Mine Bookinger</h3>
            @if (_isLoading)
            {
                <p>Henter bookinger...</p>
            }
            else if (_myBookings != null && _myBookings.Any())
            {
                <ul class="booking-list">
                    @foreach (var booking in _myBookings.OrderBy(b => b.CheckInDate))
                    {
                        <li>
                            <span class="booking-room">@booking.RoomTypeName</span>
                            <span class="booking-dates">@booking.CheckInDate.ToString("dd/MM/yyyy") - @booking.CheckOutDate.ToString("dd/MM/yyyy")</span>
                            <span class="booking-status">@booking.Status</span>
                        </li>
                    }
                </ul>
            }
            else
            {
                <p>Du har ingen bookinger endnu.</p>
            }
        </div>

        <div class="account-card">
            <h3 class="card-title">Mine Oplysninger</h3>

            @if (_isLoading)
            {
                <p>Henter oplysninger...</p>
            }
            else if (_isEditingInfo)
            {
                <EditForm Model="_userUpdateDto" OnValidSubmit="HandleUpdateInfo">
                    <DataAnnotationsValidator />
                    <div class="form-group">
                        <label>Fornavn</label>
                        <InputText class="form-control" @bind-Value="_userUpdateDto.FirstName" />
                    </div>
                    <div class="form-group">
                        <label>Efternavn</label>
                        <InputText class="form-control" @bind-Value="_userUpdateDto.LastName" />
                    </div>
                    <div class="form-group">
                        <label>Email</label>
                        <InputText class="form-control" @bind-Value="_userUpdateDto.Email" />
                    </div>
                    <div class="button-group">
                        <ActionButton Type="ActionButton.ButtonType.Primary" IsSubmit="true">Gem Ændringer</ActionButton>
                        <button type="button" class="btn btn-secondary" @onclick="ToggleEditMode">Annuller</button>
                    </div>
                </EditForm>
            }
            else if (_userDetailDto != null)
            {
                <div class="info-display">
                    <p><strong>Fornavn:</strong> @_userDetailDto.FirstName</p>
                    <p><strong>Efternavn:</strong> @_userDetailDto.LastName</p>
                    <p><strong>Email:</strong> @_userDetailDto.Email</p>
                    <ActionButton Type="ActionButton.ButtonType.Secondary" OnClick="ToggleEditMode">Rediger</ActionButton>
                </div>
            }
        </div>

        <div class="account-card">
            <h3 class="card-title">Sikkerhed</h3>
            <p>Her vil du kunne skifte din adgangskode.</p>
        </div>
    </div>
</div>

@code {
    [CascadingParameter]
    private Task<AuthenticationState> AuthenticationStateTask { get; set; } = default!;

    [Inject]
    private APIService ApiService { get; set; } = default!;

    private ClaimsPrincipal? user;
    private List<BookingGetDto> _myBookings = new();
    private bool _isLoading = true;

    private bool _isEditingInfo = false;
    private UserDetailDto? _userDetailDto;
    private UserUpdateDto _userUpdateDto = new();

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateTask;
        user = authState.User;

        var bookingsTask = ApiService.GetMyBookingsAsync();
        var userDetailsTask = ApiService.GetMyDetailsAsync();
        await Task.WhenAll(bookingsTask, userDetailsTask);

        _myBookings = bookingsTask.Result ?? new();
        _userDetailDto = userDetailsTask.Result;

        if (_userDetailDto != null)
        {
            // Opdateret til at bruge FirstName og LastName
            _userUpdateDto = new UserUpdateDto
            {
                FirstName = _userDetailDto.FirstName,
                LastName = _userDetailDto.LastName,
                Email = _userDetailDto.Email
            };
        }

        _isLoading = false;
    }

    private void ToggleEditMode()
    {
        if (_userDetailDto != null)
        {
            // Nulstil til de oprindelige værdier ved annullering
            _userUpdateDto = new UserUpdateDto
            {
                FirstName = _userDetailDto.FirstName,
                LastName = _userDetailDto.LastName,
                Email = _userDetailDto.Email
            };
        }
        _isEditingInfo = !_isEditingInfo;
    }

    private async Task HandleUpdateInfo()
    {
        if (user != null && _userDetailDto != null)
        {
            var userId = user.FindFirst(ClaimTypes.NameIdentifier)?.Value;
            if (userId == null) return;

            var success = await ApiService.UpdateMyDetailsAsync(userId, _userUpdateDto);
            if (success)
            {
                // Opdater de viste detaljer efter en succesfuld gemning
                _userDetailDto.FirstName = _userUpdateDto.FirstName;
                _userDetailDto.LastName = _userUpdateDto.LastName;
                _userDetailDto.Email = _userUpdateDto.Email;
                _isEditingInfo = false;
            }
            else
            {
                // Her kan vi senere vise en fejlbesked i UI'et
                Console.WriteLine("Opdatering af brugeroplysninger fejlede.");
            }
        }
    }
}