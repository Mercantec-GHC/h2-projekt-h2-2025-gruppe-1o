@page "/account"
@attribute [Authorize]
@using DomainModels.DTOs
@using System.Security.Claims

<PageTitle>Min Konto</PageTitle>

<div class="page-section">
    <h2 class="section-title">Min Konto</h2>
    <p class="section-subtitle">Velkommen, @user?.Identity?.Name! Her kan du administrere dine oplysninger og bookinger.</p>

    <div class="account-grid">
        <div class="account-card">
            <h3 class="card-title">Mine Bookinger</h3>
            @if (_isLoading)
            {
                <p>Henter bookinger...</p>
            }
            else if (_myBookings != null && _myBookings.Any())
            {
                <ul class="booking-list">
                    @foreach (var booking in _myBookings.OrderBy(b => b.CheckInDate))
                    {
                        <li>
                            <span class="booking-room">@booking.RoomTypeName</span>
                            <span class="booking-dates">@booking.CheckInDate.ToString("dd/MM/yyyy") - @booking.CheckOutDate.ToString("dd/MM/yyyy")</span>
                            <span class="booking-status">@booking.Status</span>
                        </li>
                    }
                </ul>
            }
            else
            {
                <p>Du har ingen bookinger endnu.</p>
            }
        </div>

        <div class="account-card">
            <h3 class="card-title">Mine Oplysninger</h3>
            @if (_isLoading)
            {
                <p>Henter oplysninger...</p>
            }
            else if (_isEditingInfo)
            {
                <EditForm Model="_userUpdateDto" OnValidSubmit="HandleUpdateInfo">
                    <DataAnnotationsValidator />
                    <ValidationSummary class="text-danger" />

                    @if (!string.IsNullOrEmpty(_updateInfoMessage))
                    {
                        <div class="alert @(_updateInfoSuccess ? "alert-success" : "alert-danger")" role="alert">
                            @_updateInfoMessage
                        </div>
                    }

                    <div class="form-group">
                        <label>Fornavn</label>
                        <InputText class="form-control" @bind-Value="_userUpdateDto.FirstName" />
                    </div>
                    <div class="form-group">
                        <label>Efternavn</label>
                        <InputText class="form-control" @bind-Value="_userUpdateDto.LastName" />
                    </div>
                    <div class="form-group">
                        <label>Email</label>
                        <InputText class="form-control" @bind-Value="_userUpdateDto.Email" />
                    </div>
                    <div class="form-group">
                        <label>Telefon nr.</label>
                        <InputText class="form-control" @bind-Value="_userUpdateDto.PhoneNumber" />
                    </div>
                    <ActionButton Type="ActionButton.ButtonType.Primary" IsSubmit="true">Ændre Oplysninger</ActionButton>
                </EditForm>
            }
            else if (_userDetailDto != null)
            {
                <div class="info-display">
                    <p><strong>Fornavn:</strong> @_userDetailDto.FirstName</p>
                    <p><strong>Efternavn:</strong> @_userDetailDto.LastName</p>
                    <p><strong>Email:</strong> @_userDetailDto.Email</p>
                    <p><strong>Telefon nr.:</strong> @_userDetailDto.PhoneNumber</p>
                    <ActionButton Type="ActionButton.ButtonType.Primary" @onclick="ToggleEditMode">Rediger</ActionButton>
                </div>
            }
        </div>

        <div class="account-card">
            <h3 class="card-title">Sikkerhed</h3>
            <EditForm Model="_changePasswordDto" OnValidSubmit="HandleChangePassword">
                <DataAnnotationsValidator />
                <ValidationSummary class="text-danger" />

                @if (!string.IsNullOrEmpty(_passwordChangeMessage))
                {
                    <div class="alert @(_passwordChangeSuccess ? "alert-success" : "alert-danger")" role="alert">
                        @_passwordChangeMessage
                    </div>
                }

                <div class="form-group">
                    <label>Nuværende adgangskode</label>
                    <InputText type="password" class="form-control" @bind-Value="_changePasswordDto.CurrentPassword" />
                </div>
                <div class="form-group">
                    <label>Ny adgangskode</label>
                    <InputText type="password" class="form-control" @bind-Value="_changePasswordDto.NewPassword" />
                </div>
                <div class="form-group">
                    <label>Bekræft ny adgangskode</label>
                    <InputText type="password" class="form-control" @bind-Value="_changePasswordDto.ConfirmNewPassword" />
                </div>
                <ActionButton Type="ActionButton.ButtonType.Primary" IsSubmit="true">Skift Adgangskode</ActionButton>
            </EditForm>
        </div>
    </div>
</div>

@code {
    [CascadingParameter]
    private Task<AuthenticationState> AuthenticationStateTask { get; set; } = default!;

    [Inject]
    private APIService ApiService { get; set; } = default!;

    private ClaimsPrincipal? user;
    private List<BookingGetDto> _myBookings = new();
    private bool _isLoading = true;

    private bool _isEditingInfo = false;
    private UserDetailDto? _userDetailDto;
    private UserUpdateDto _userUpdateDto = new();
    private string? _updateInfoMessage;
    private bool _updateInfoSuccess = false;

    private ChangePasswordDto _changePasswordDto = new();
    private string? _passwordChangeMessage;
    private bool _passwordChangeSuccess = false;

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateTask;
        user = authState.User;

        var bookingsTask = ApiService.GetMyBookingsAsync();
        var userDetailsTask = ApiService.GetMyDetailsAsync();
        await Task.WhenAll(bookingsTask, userDetailsTask);

        _myBookings = bookingsTask.Result ?? new();
        _userDetailDto = userDetailsTask.Result;

        if (_userDetailDto != null)
        {
            _userUpdateDto = new UserUpdateDto
            {
                FirstName = _userDetailDto.FirstName,
                LastName = _userDetailDto.LastName,
                Email = _userDetailDto.Email,
                PhoneNumber = _userDetailDto.PhoneNumber
            };
        }
        _isLoading = false;
    }

    private void ToggleEditMode()
    {
        _updateInfoMessage = null;
        if (_userDetailDto != null)
        {
            _userUpdateDto = new UserUpdateDto
            {
                FirstName = _userDetailDto.FirstName,
                LastName = _userDetailDto.LastName,
                Email = _userDetailDto.Email,
                PhoneNumber = _userDetailDto.PhoneNumber
            };
        }
        _isEditingInfo = !_isEditingInfo;
    }

    private async Task HandleUpdateInfo()
    {
        _updateInfoMessage = null;
        if (user == null || _userDetailDto == null) return;

        var userId = user.FindFirst(ClaimTypes.NameIdentifier)?.Value;
        if (userId == null) return;

        var (success, errorMessage) = await ApiService.UpdateMyDetailsAsync(userId, _userUpdateDto);
        _updateInfoSuccess = success;

        if (success)
        {
            _updateInfoMessage = "Dine oplysninger er blevet opdateret.";
            _userDetailDto.FirstName = _userUpdateDto.FirstName;
            _userDetailDto.LastName = _userUpdateDto.LastName;
            _userDetailDto.Email = _userUpdateDto.Email;
            _userDetailDto.PhoneNumber = _userUpdateDto.PhoneNumber ?? string.Empty;


            _isEditingInfo = false;
        }
        else
        {
            _updateInfoMessage = $"Fejl: {errorMessage}";
        }
    }

    private async Task HandleChangePassword()
    {
        _passwordChangeMessage = null;
        if (_changePasswordDto == null) return;

        var (success, errorMessage) = await ApiService.ChangePasswordAsync(_changePasswordDto);
        _passwordChangeSuccess = success;

        if (success)
        {
            _passwordChangeMessage = "Din adgangskode er blevet ændret.";
            _changePasswordDto = new();
        }
        else
        {
            _passwordChangeMessage = $"Fejl: {errorMessage}";
        }
    }
}