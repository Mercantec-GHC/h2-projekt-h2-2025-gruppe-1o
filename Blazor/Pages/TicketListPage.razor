@page "/support/tickets"
@attribute [Authorize]
@inject APIService ApiService
@inject NavigationManager Navigation
@inject TicketSignalRService SignalRService
@using System.Security.Claims
@implements IDisposable

<PageTitle>Support Sager</PageTitle>

<div class="page-section">
    <div class="d-flex justify-content-between align-items-center mb-4">
        <PageHeader Title="Oversigt over sager" />
        <ActionButton OnClick="@(() => Navigation.NavigateTo("/support/new"))">Opret Ny Sag</ActionButton>
    </div>

    @if (_tickets == null)
    {
        <p><em>Indlæser sager...</em></p>
    }
    else if (!_tickets.Any())
    {
        <p>Der er ingen sager at vise endnu.</p>
    }
    else
    {
        <table class="table table-hover">
            <thead>
                <tr>
                    <th>ID</th>
                    <th>Titel</th>
                    <th>Kategori</th>
                    <th>Status</th>
                    <th>Oprettet af</th>
                    <th>Oprettet</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var ticket in _tickets)
                {
                    <tr @onclick="@(() => ViewTicket(ticket.Id))" style="cursor: pointer;">
                        <td>#@ticket.Id.Substring(0, 6).ToUpper()</td>
                        <td>@ticket.Title</td>
                        <td>@ticket.Category</td>
                        <td><StatusBadge Status="@ticket.Status" /></td>
                        <td>@ticket.CreatedByName</td>
                        <td>@ticket.CreatedAt.ToString("dd-MM-yyyy HH:mm")</td>
                    </tr>
                }
            </tbody>
        </table>
    }
</div>

@code {
    [CascadingParameter]
    private Task<AuthenticationState> AuthStateTask { get; set; } = default!;

    private List<TicketSummaryDto>? _tickets;

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthStateTask;
        var user = authState.User;

        await SignalRService.StartConnectionAsync(await ApiService.GetAuthTokenAsync());
        SignalRService.OnNewTicketReceived += HandleNewTicket;

        bool isStaff = user.IsInRole("Manager") || user.IsInRole("Receptionist") || user.IsInRole("Housekeeping");

        if (isStaff)
        {
            _tickets = await ApiService.GetOpenTicketsForMyRoleAsync();
        }
        else
        {
            _tickets = await ApiService.GetMyTicketsAsync();
        }
    }

    private async void HandleNewTicket(TicketSummaryDto newTicket)
    {
        var authState = await AuthStateTask;
        var user = authState.User;
        bool isStaff = user.IsInRole("Manager") || user.IsInRole("Receptionist") || user.IsInRole("Housekeeping");

        if (isStaff)
        {
            _tickets = await ApiService.GetOpenTicketsForMyRoleAsync();
        }
        else
        {
            _tickets = await ApiService.GetMyTicketsAsync();
        }

        await InvokeAsync(StateHasChanged);
    }

    private void ViewTicket(string ticketId)
    {
        Navigation.NavigateTo($"/support/ticket/{ticketId}");
    }

    public void Dispose()
    {
        SignalRService.OnNewTicketReceived -= HandleNewTicket;
    }
}