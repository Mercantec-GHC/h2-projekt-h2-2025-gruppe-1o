@page "/staff-login"
@layout MainLayout
@using DomainModels.DTOs

<PageTitle>Medarbejder Login</PageTitle>

<div class="form-container">
    <div class="form-card">
        <div class="form-logo">S</div>
        <h2 class="form-title">Medarbejder Portal</h2>
        <p class="form-subtitle">Log ind med din AD-konto</p>

        <EditForm Model="_loginModel" OnValidSubmit="HandleStaffLogin">
            <DataAnnotationsValidator />
            
            @if (!string.IsNullOrEmpty(_errorMessage))
            {
                <div class="alert alert-danger">@_errorMessage</div>
            }

            <div class="form-group">
                <label for="username">Brugernavn</label>
                <InputText id="username" class="form-control" @bind-Value="_loginModel.Username" />
            </div>

            <div class="form-group">
                <label for="password">Adgangskode</label>
                <InputText id="password" type="password" class="form-control" @bind-Value="_loginModel.Password" />
            </div>

            <ActionButton Type="ActionButton.ButtonType.Primary" IsSubmit="true">
                Log ind
            </ActionButton>
        </EditForm>
    </div>
</div>

@code {
    [Inject]
    private APIService ApiService { get; set; } = default!;
    [Inject]
    private NavigationManager Navigation { get; set; } = default!;

    private StaffLoginDto _loginModel = new();
    private string? _errorMessage;

    private async Task HandleStaffLogin()
    {
        _errorMessage = null;
        // Vi kalder den nye metode i APIService
        var loginResult = await ApiService.StaffLoginAsync(_loginModel);

        if (loginResult != null && !string.IsNullOrEmpty(loginResult.Token))
        {
            // Redirect based on user role from login response
            var redirectUrl = loginResult.User?.Role?.ToLower() switch
            {
                "housekeeping" => "/housekeeping-dashboard",
                "receptionist" => "/admin",
                "manager" => "/admin",
                "admin" => "/admin",
                _ => "/admin" // Default fallback
            };
            
            Navigation.NavigateTo(redirectUrl, forceLoad: true);
        }
        else
        {
            _errorMessage = "Ugyldigt brugernavn eller adgangskode. Prøv venligst igen.";
        }
    }
}
