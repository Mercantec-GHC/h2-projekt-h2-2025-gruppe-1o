@page "/admin"
@layout MainLayout
@attribute [Authorize(Roles = "Receptionist, Manager")]
@using DomainModels.DTOs
@using System.Globalization
@using DomainModels.Enums
@inject APIService ApiService
@inject TicketSignalRService SignalRService
@inject NavigationManager Navigation
@implements IDisposable

<PageTitle>Management Dashboard</PageTitle>

<div class="booking-management-page">
    <h1 class="page-title">Booking Management</h1>
    <p class="page-subtitle">Oversigt over bookinger, gæsteaktivitet og support.</p>

    <div class="card shadow-sm mb-4">
        <div class="card-body">
            <div class="row g-3 align-items-end">
                <div class="col-md-5">
                    <label class="form-label fw-semibold">Søg i bookinger</label>
                    <div class="input-group">
                        <input type="text" class="form-control" placeholder="Booking ID, gæstenavn..." @bind="_searchTerm" @oninput="ApplyFilters" />
                        <span class="input-group-text"><i class="bi bi-search"></i></span>
                    </div>
                </div>
                <div class="col-md-3">
                    <label class="form-label fw-semibold">Vis dato</label>
                    <InputDate class="form-control" @bind-Value="_dateFilter" @bind-Value:after="ApplyFilters" />
                </div>
                <div class="col-md-2">
                    <label class="form-label fw-semibold">Status</label>
                    <select class="form-select" @bind="_statusFilter" @bind:after="ApplyFilters">
                        <option value="">Alle status</option>
                        <option value="Confirmed">Bekræftet</option>
                        <option value="CheckedIn">Checket Ind</option>
                        <option value="CheckedOut">Checket Ud</option>
                        <option value="Cancelled">Annulleret</option>
                    </select>
                </div>
                <div class="col-md-2">
                    <button class="btn btn-secondary w-100" @onclick="ClearFilters">Nulstil</button>
                </div>
            </div>
        </div>
    </div>

    <ul class="nav nav-tabs mb-3">
        <li class="nav-item">
            <button class="nav-link @(_activeTab == "arrivals" ? "active" : "")" @onclick='() => SetActiveTab("arrivals")'>Dagens Ankomster (@_arrivals.Count)</button>
        </li>
        <li class="nav-item">
            <button class="nav-link @(_activeTab == "departures" ? "active" : "")" @onclick='() => SetActiveTab("departures")'>Dagens Afrejser (@_departures.Count)</button>
        </li>
        <li class="nav-item">
            <button class="nav-link @(_activeTab == "all" ? "active" : "")" @onclick='() => SetActiveTab("all")'>Alle Bookinger (@GetVisibleBookings().Count)</button>
        </li>
    </ul>

    @if (_isLoading)
    {
        <p><em>Henter data...</em></p>
    }
    else
    {
        <div class="table-responsive">
            <table class="table table-hover align-middle">
                <thead>
                    <tr>
                        <th>Booking ID</th>
                        <th>Gæstenavn</th>
                        <th>Værelse</th>
                        <th>Check-in</th>
                        <th>Check-ud</th>
                        <th>Status</th>
                        <th class="text-end">Handlinger</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var booking in GetVisibleBookings())
                    {
                        <tr>
                            <td>#@booking.Id.Substring(0, 6).ToUpper()</td>
                            <td>@booking.GuestFullName</td>
                            <td>@booking.RoomTypeName</td>
                            <td>@booking.CheckInDate.ToString("dd/MM/yyyy")</td>
                            <td>@booking.CheckOutDate.ToString("dd/MM/yyyy")</td>
                            <td><span class="badge @GetStatusClass(booking.Status)">@booking.Status</span></td>
                            <td class="text-end">
                                <button class="btn btn-sm btn-icon"><i class="bi bi-eye-fill"></i></button>
                                <button class="btn btn-sm btn-icon"><i class="bi bi-pencil-fill"></i></button>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    }

    <AuthorizeView Roles="Receptionist" Context="receptionistAuthContext">
        <div class="receptionist-section">
            <hr class="my-5" />

            <h2 class="section-title">Dagens Status & Walk-in Booking</h2>
            <p class="section-subtitle">Få et hurtigt overblik over ledige værelser og opret bookinger for walk-in gæster.</p>

            @if (_roomTypeAvailability == null)
            {
                <p><em>Indlæser værelsesstatus...</em></p>
            }
            else
            {
                <div class="row g-4">
                    @foreach (var roomType in _roomTypeAvailability)
                    {
                        <div class="col-md-4">
                            <div class="card h-100 shadow-sm admin-room-card" @onclick="() => SelectRoomTypeForWalkIn(roomType)">
                                <img src="@GetRoomImagePath(roomType.Name)" class="card-img-top" alt="@roomType.Name" />
                                <div class="card-body">
                                    <h5 class="card-title">@roomType.Name</h5>
                                    <p class="card-text text-success fw-bold">@roomType.AvailableCount ledige værelser</p>
                                </div>
                                <div class="card-footer">
                                    <small class="text-muted">Klik for at oprette walk-in booking</small>
                                </div>
                            </div>
                        </div>
                    }
                </div>
            }

            @if (_selectedRoomTypeForWalkIn is not null)
            {
                <div class="card shadow-sm mt-4 walk-in-form">
                    <div class="card-header">
                        <div class="d-flex justify-content-between align-items-center">
                            <h4 class="mb-0">Opret Walk-in Booking for: @_selectedRoomTypeForWalkIn.Name</h4>
                            <button class="btn-close" @onclick="CancelWalkIn"></button>
                        </div>
                    </div>
                    <div class="card-body">
                        @* --- START: OPDATERET LOGIK FOR BEKRÆFTELSES-SKÆRM --- *@
                        @if (_lastCreatedBooking is not null)
                        {
                            <div class="text-center p-4">
                                <i class="bi bi-check-circle-fill text-success" style="font-size: 3rem;"></i>
                                <h3 class="mt-3">Booking Gennemført!</h3>
                                <p>Booking til <strong>@_lastCreatedBooking.UserFullName</strong> er nu oprettet.</p>
                                <p>Booking ID: <strong>#@_lastCreatedBooking.Id.Substring(0, 6).ToUpper()</strong></p>
                                <ActionButton Type="ActionButton.ButtonType.Secondary" OnClick="ResetWalkInForm">Opret ny walk-in booking</ActionButton>
                            </div>
                        }
                        else
                        {
                            <EditForm Model="_walkInBooking" OnValidSubmit="HandleWalkInSubmit">
                                <DataAnnotationsValidator />
                                <ValidationSummary class="text-danger" />

                                @if (!string.IsNullOrEmpty(_walkInStatusMessage))
                                {
                                    <div class="alert @(_walkInSuccess ? "alert-success" : "alert-danger")">@_walkInStatusMessage</div>
                                }

                                <div class="row g-3">
                                    <div class="col-md-6"><div class="form-group"><label>Fornavn</label><InputText class="form-control" @bind-Value="_walkInBooking.FirstName" /></div></div>
                                    <div class="col-md-6"><div class="form-group"><label>Efternavn</label><InputText class="form-control" @bind-Value="_walkInBooking.LastName" /></div></div>
                                    <div class="col-md-6"><div class="form-group"><label>Email</label><InputText type="email" class="form-control" @bind-Value="_walkInBooking.Email" /></div></div>
                                    <div class="col-md-6"><div class="form-group"><label>Telefon</label><InputText class="form-control" @bind-Value="_walkInBooking.PhoneNumber" /></div></div>
                                    <div class="col-md-4"><div class="form-group"><label>Check-in</label><InputDate class="form-control" @bind-Value="_walkInBooking.CheckInDate" /></div></div>
                                    <div class="col-md-4"><div class="form-group"><label>Check-ud</label><InputDate class="form-control" @bind-Value="_walkInBooking.CheckOutDate" /></div></div>
                                    <div class="col-md-4"><div class="form-group"><label>Antal Gæster</label><InputNumber class="form-control" @bind-Value="_walkInBooking.GuestCount" min="1" /></div></div>
                                </div>

                                @if (_selectedRoomTypeDetails?.Services?.Any() == true)
                                {
                                    <hr class="my-4" />
                                    <h3 class="h5">Tilføj Ekstra Luksus</h3>
                                    @foreach (var group in _selectedRoomTypeDetails.Services.GroupBy(s => s.Category))
                                    {
                                        <details class="service-category-dropdown" open>
                                            <summary>@group.Key</summary>
                                            <div class="services-checklist">
                                                @foreach (var service in group)
                                                {
                                                    <div class="service-check-item">
                                                        <input type="checkbox" class="form-check-input" id="service-@service.Id" @onchange="(e) => ToggleServiceSelection(service.Id, (bool)e.Value)" />
                                                        <label class="form-check-label" for="service-@service.Id">
                                                            <div class="service-details">
                                                                <span class="service-name">@service.Name</span>
                                                                <span class="service-price">@service.Price.ToString("C0", _danishCulture)</span>
                                                            </div>
                                                            <small class="service-description">@service.Description</small>
                                                        </label>
                                                    </div>
                                                }
                                            </div>
                                        </details>
                                    }
                                }

                                <div class="d-flex justify-content-between align-items-center mt-4">
                                    <h4 class="mb-0">Totalpris: <strong>@CalculateTotalPrice().ToString("C0", _danishCulture)</strong></h4>
                                    <ActionButton Type="ActionButton.ButtonType.Primary" IsSubmit="true">Opret Booking</ActionButton>
                                </div>
                            </EditForm>
                        }
                        @* --- SLUT: OPDATERET LOGIK FOR BEKRÆFTELSES-SKÆRM --- *@
                    </div>
                </div>
            }

            <hr class="my-5" />

            <h2 class="section-title">Værelsesstatus & Housekeeping</h2>
            <p class="section-subtitle">Se status på alle hotellets værelser og anmod om rengøring.</p>

            @if (_allPhysicalRooms == null)
            {
                <p><em>Indlæser værelsesliste...</em></p>
            }
            else
            {
                <div class="card shadow-sm">
                    <div class="card-body">
                        <div class="mb-3">
                            <input type="text" class="form-control" placeholder="Søg på værelsesnummer..." @bind="_housekeepingSearchTerm" @bind:event="oninput" />
                        </div>
                        <div class="table-responsive" style="max-height: 400px; overflow-y: auto;">
                            <table class="table table-sm table-striped">
                                <thead>
                                    <tr>
                                        <th>Værelse</th>
                                        <th>Type</th>
                                        <th>Status</th>
                                        <th class="text-end">Handling</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @foreach (var room in FilteredPhysicalRooms)
                                    {
                                        <tr>
                                            <td>@room.RoomNumber</td>
                                            <td>@room.RoomTypeName</td>
                                            <td><span class="badge @GetRoomStatusClass(room.Status)">@room.Status</span></td>
                                            <td class="text-end">
                                                <button class="btn btn-sm btn-outline-primary"
                                                        disabled="@(room.Status == "NeedsCleaning")"
                                                        @onclick="() => RequestCleaning(room.Id)">
                                                    Anmod om Rengøring
                                                </button>
                                            </td>
                                        </tr>
                                    }
                                </tbody>
                            </table>
                        </div>
                    </div>
                </div>
            }
        </div>
    </AuthorizeView>

    <AuthorizeView Roles="Manager">
        <h2 class="mt-5 mb-3">Dagens Statistik</h2>
        @if (_stats != null)
        {
            <div class="row">
                <div class="col-md-3"><div class="card text-center shadow-sm h-100"><div class="card-body"><i class="bi bi-box-arrow-in-right fs-1 text-primary"></i><h4 class="mt-2">@_stats.ArrivalsCount</h4><p class="text-muted mb-0">Ankomster</p></div></div></div>
                <div class="col-md-3"><div class="card text-center shadow-sm h-100"><div class="card-body"><i class="bi bi-box-arrow-left fs-1 text-primary"></i><h4 class="mt-2">@_stats.DeparturesCount</h4><p class="text-muted mb-0">Afrejser</p></div></div></div>
                <div class="col-md-3"><div class="card text-center shadow-sm h-100"><div class="card-body"><i class="bi bi-building fs-1 text-primary"></i><h4 class="mt-2">@_stats.OccupancyPercentage %</h4><p class="text-muted mb-0">Belægning</p></div></div></div>
                <div class="col-md-3"><div class="card text-center shadow-sm h-100"><div class="card-body"><i class="bi bi-cash-stack fs-1 text-primary"></i><h4 class="mt-2">@_stats.TodaysRevenue.ToString("N0") kr.</h4><p class="text-muted mb-0">Omsætning</p></div></div></div>
            </div>
        }

        <div class="d-flex justify-content-between align-items-center mt-5 mb-3">
            <h2 class="mb-0">Support Sager</h2>
            <ActionButton OnClick="@(() => Navigation.NavigateTo("/support/new"))">Opret Ny Sag</ActionButton>
        </div>
        <div class="row">
            <div class="col-md-6">
                <OpenTicketsList />
            </div>
            <div class="col-md-6">
                <div class="card">
                    <div class="card-header">Lukkede Support Sager</div>
                    <div class="card-body">
                        @if (_closedTickets == null)
                        {
                            <p><em>Indlæser...</em></p>
                        }
                        else if (!_closedTickets.Any())
                        {
                            <p>Ingen lukkede sager fundet.</p>
                        }
                        else
                        {
                            <ul class="list-group list-group-flush">
                                @foreach (var ticket in _closedTickets)
                                {
                                    <li class="list-group-item list-group-item-action" style="cursor:pointer;" @onclick="@(() => Navigation.NavigateTo($"/support/ticket/{ticket.Id}"))">
                                        #@ticket.Id.Substring(0, 6).ToUpper() - @ticket.Title
                                    </li>
                                }
                            </ul>
                        }
                    </div>
                </div>
            </div>
        </div>
    </AuthorizeView>
</div>

@* --- START: NY CSS-BLOK TIL HOVER-EFFEKT --- *@
<style>
    .admin-room-card {
        border: 1px solid #dee2e6;
        transition: transform 0.2s ease-in-out, box-shadow 0.2s ease-in-out;
        cursor: pointer;
    }

        .admin-room-card:hover {
            transform: scale(1.03);
            box-shadow: 0 0.5rem 1rem rgba(0, 0, 0, 0.15);
            border-color: #0d6efd;
        }
</style>
@* --- SLUT: NY CSS-BLOK TIL HOVER-EFFEKT --- *@

@code {
    private bool _isLoading = true;
    private string _activeTab = "arrivals";

    private List<BookingSummaryDto> _allBookings = new();
    private List<BookingSummaryDto> _arrivals = new();
    private List<BookingSummaryDto> _departures = new();

    private DailyStatsDto? _stats;
    private List<TicketSummaryDto>? _closedTickets;

    private string _searchTerm = "";
    private DateTime? _dateFilter;
    private string _statusFilter = "";

    private List<RoomTypeCardDto>? _roomTypeAvailability;
    private List<RoomGetDto>? _allPhysicalRooms;
    private WalkInBookingDto _walkInBooking = new();
    private RoomTypeCardDto? _selectedRoomTypeForWalkIn;
    private string? _walkInStatusMessage;
    private bool _walkInSuccess;
    private string _housekeepingSearchTerm = "";

    private RoomTypeDetailDto? _selectedRoomTypeDetails;
    private readonly CultureInfo _danishCulture = new("da-DK");

    // NY STATE-VARIABEL TIL BEKRÆFTELSES-SKÆRM
    private BookingGetDto? _lastCreatedBooking;

    private IEnumerable<RoomGetDto> FilteredPhysicalRooms =>
        _allPhysicalRooms?.Where(r => string.IsNullOrWhiteSpace(_housekeepingSearchTerm) ||
                                      r.RoomNumber.Contains(_housekeepingSearchTerm, StringComparison.OrdinalIgnoreCase)) ??
        Enumerable.Empty<RoomGetDto>();

    [CascadingParameter]
    private Task<AuthenticationState> AuthStateTask { get; set; } = default!;

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthStateTask;
        var user = authState.User;

        var token = await ApiService.GetAuthTokenAsync();
        await SignalRService.StartConnectionAsync(token);

        SignalRService.OnNewTicketReceived += async (ticket) => await ReloadManagerTickets();
        SignalRService.OnStatusChanged += async (ticketId, status) => await ReloadManagerTickets();
        SignalRService.OnRoomStatusChanged += HandleRoomStatusChanged;

        await LoadData(user);
    }

    private async Task LoadData(ClaimsPrincipal user)
    {
        _isLoading = true;

        var allBookingsTask = ApiService.GetBookingsForAdminAsync();
        Task<DailyStatsDto?>? statsTask = null;
        Task<List<TicketSummaryDto>?>? closedTicketsTask = null;
        Task<List<RoomTypeCardDto>?>? roomAvailabilityTask = null;
        Task<List<RoomGetDto>?>? allRoomsTask = null;

        if (user.IsInRole("Manager"))
        {
            statsTask = ApiService.GetDashboardStatsAsync();
            closedTicketsTask = ApiService.GetClosedTicketsForMyRoleAsync();
        }

        if (user.IsInRole("Receptionist"))
        {
            roomAvailabilityTask = ApiService.GetRoomTypeAvailabilitySummaryAsync();
            allRoomsTask = ApiService.GetAllRoomsAsync();
        }

        await Task.WhenAll(allBookingsTask, statsTask ?? Task.CompletedTask, closedTicketsTask ?? Task.CompletedTask,
                           roomAvailabilityTask ?? Task.CompletedTask, allRoomsTask ?? Task.CompletedTask);

        _allBookings = allBookingsTask.Result ?? new();
        if (statsTask != null) _stats = await statsTask;
        if (closedTicketsTask != null) _closedTickets = await closedTicketsTask ?? new();
        if (roomAvailabilityTask != null) _roomTypeAvailability = await roomAvailabilityTask ?? new();
        if (allRoomsTask != null) _allPhysicalRooms = (await allRoomsTask ?? new()).OrderBy(r => r.RoomNumber).ToList();

        FilterLocalLists();
        _isLoading = false;
    }

    private async Task SelectRoomTypeForWalkIn(RoomTypeCardDto roomType)
    {
        ResetWalkInForm(); // Nulstil altid først
        _selectedRoomTypeForWalkIn = roomType;
        _selectedRoomTypeDetails = await ApiService.GetRoomTypeByIdAsync(roomType.Id);

        _walkInBooking = new WalkInBookingDto
        {
            RoomTypeId = roomType.Id,
            CheckInDate = DateTime.Today,
            CheckOutDate = DateTime.Today.AddDays(1),
            GuestCount = 1,
            ServiceIds = new List<int>()
        };
    }

    private void CancelWalkIn()
    {
        _selectedRoomTypeForWalkIn = null;
        _selectedRoomTypeDetails = null;
        _lastCreatedBooking = null;
    }

    // NY METODE TIL AT NULSTILLE FORMULAREN
    private void ResetWalkInForm()
    {
        _walkInBooking = new();
        _walkInStatusMessage = null;
        _lastCreatedBooking = null;
    }

    private void ToggleServiceSelection(int serviceId, bool isChecked)
    {
        if (isChecked)
        {
            if (!_walkInBooking.ServiceIds.Contains(serviceId))
            {
                _walkInBooking.ServiceIds.Add(serviceId);
            }
        }
        else
        {
            _walkInBooking.ServiceIds.Remove(serviceId);
        }
        StateHasChanged();
    }

    private async Task HandleWalkInSubmit()
    {
        _walkInStatusMessage = "Opretter booking...";
        StateHasChanged();

        var (success, message, newBooking) = await ApiService.CreateWalkInBookingAsync(_walkInBooking);
        _walkInSuccess = success;

        if (success && newBooking != null)
        {
            _lastCreatedBooking = newBooking; // Sæt den nye booking for at vise bekræftelse
            _walkInStatusMessage = null;
            var authState = await AuthStateTask;
            await LoadData(authState.User); // Genindlæs data i baggrunden
        }
        else
        {
            _walkInStatusMessage = message;
        }
    }

    private decimal CalculateTotalPrice()
    {
        if (_selectedRoomTypeDetails == null) return 0;

        var nights = (_walkInBooking.CheckOutDate - _walkInBooking.CheckInDate).Days;
        if (nights <= 0) return 0;

        var roomPrice = _selectedRoomTypeDetails.BasePrice * nights;

        var servicesPrice = _selectedRoomTypeDetails.Services
            .Where(s => _walkInBooking.ServiceIds.Contains(s.Id))
            .Sum(s =>
            {
                Enum.TryParse(s.BillingType, out BillingType billingType);
                return billingType switch
                {
                    BillingType.PerNight => s.Price * nights,
                    BillingType.PerPerson => s.Price * _walkInBooking.GuestCount,
                    BillingType.PerPersonPerNight => s.Price * nights * _walkInBooking.GuestCount,
                    _ => s.Price
                };
            });

        return roomPrice + servicesPrice;
    }

    private async Task RequestCleaning(int roomId)
    {
        var success = await ApiService.RequestRoomCleaningAsync(roomId);
        if (success)
        {
            var room = _allPhysicalRooms?.FirstOrDefault(r => r.Id == roomId);
            if (room != null)
            {
                room.Status = "NeedsCleaning";
                StateHasChanged();
            }
        }
    }

    private async void HandleRoomStatusChanged(int roomId, string newStatus)
    {
        var room = _allPhysicalRooms?.FirstOrDefault(r => r.Id == roomId);
        if (room != null)
        {
            room.Status = newStatus;
            await InvokeAsync(StateHasChanged);
        }
    }

    private async Task ReloadManagerTickets()
    {
        var authState = await AuthStateTask;
        if (authState.User.IsInRole("Manager"))
        {
            _closedTickets = await ApiService.GetClosedTicketsForMyRoleAsync() ?? new();
            await InvokeAsync(StateHasChanged);
        }
    }

    private void SetActiveTab(string tabName) => _activeTab = tabName;

    private List<BookingSummaryDto> GetVisibleBookings()
    {
        var sourceList = _activeTab switch
        {
            "arrivals" => _arrivals,
            "departures" => _departures,
            _ => _allBookings
        };

        var filtered = sourceList.AsEnumerable();
        if (!string.IsNullOrEmpty(_searchTerm))
        {
            filtered = filtered.Where(b => b.GuestFullName.Contains(_searchTerm, StringComparison.OrdinalIgnoreCase) || b.Id.Contains(_searchTerm, StringComparison.OrdinalIgnoreCase));
        }
        if (!string.IsNullOrEmpty(_statusFilter))
        {
            filtered = filtered.Where(b => b.Status.Equals(_statusFilter, StringComparison.OrdinalIgnoreCase));
        }
        if (_dateFilter.HasValue)
        {
            filtered = filtered.Where(b => b.CheckInDate.Date <= _dateFilter.Value.Date && b.CheckOutDate.Date > _dateFilter.Value.Date);
        }

        return filtered.ToList();
    }

    private void FilterLocalLists()
    {
        var today = DateTime.UtcNow.Date;
        _arrivals = _allBookings.Where(b => b.CheckInDate.Date == today).ToList();
        _departures = _allBookings.Where(b => b.CheckOutDate.Date == today).ToList();
    }

    private async Task ApplyFilters() => await Task.CompletedTask;

    private async Task ClearFilters()
    {
        _searchTerm = "";
        _dateFilter = null;
        _statusFilter = "";
        await ApplyFilters();
    }

    private string GetStatusClass(string status) => status.ToLower() switch
    {
        "confirmed" => "bg-success",
        "checkedin" => "bg-info text-dark",
        "checkedout" => "bg-secondary",
        "cancelled" => "bg-danger",
        _ => "bg-dark"
    };

    private string GetRoomStatusClass(string status) => status switch
    {
        "Clean" => "bg-success",
        "NeedsCleaning" => "bg-warning text-dark",
        "Occupied" => "bg-danger",
        _ => "bg-secondary"
    };

    private string GetRoomImagePath(string roomTypeName) => roomTypeName switch
    {
        "Standard Værelse" => "images/room-standard.png",
        "Deluxe Suite" => "images/room-deluxe.png",
        "Presidential Suite" => "images/room-presidential.png",
        _ => ""
    };

    public void Dispose()
    {
        SignalRService.OnNewTicketReceived -= async (ticket) => await ReloadManagerTickets();
        SignalRService.OnStatusChanged -= async (ticketId, status) => await ReloadManagerTickets();
        SignalRService.OnRoomStatusChanged -= HandleRoomStatusChanged;
    }
}