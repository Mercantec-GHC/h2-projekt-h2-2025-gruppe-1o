@page "/admin"
@layout MainLayout
@attribute [Authorize(Roles = "Receptionist, Manager")]
@inject APIService ApiService
@inject TicketSignalRService SignalRService
@inject NavigationManager Navigation
@implements IDisposable

<PageTitle>Management Dashboard</PageTitle>

<div class="booking-management-page">
    <h1 class="page-title">Booking Management</h1>
    <p class="page-subtitle">Oversigt over bookinger, gæsteaktivitet og support.</p>

    <div class="card shadow-sm mb-4">
        <div class="card-body">
            <div class="row g-3 align-items-end">
                <div class="col-md-5">
                    <label class="form-label fw-semibold">Søg i bookinger</label>
                    <div class="input-group">
                        <input type="text" class="form-control" placeholder="Booking ID, gæstenavn..." @bind="_searchTerm" @oninput="ApplyFilters" />
                        <span class="input-group-text"><i class="bi bi-search"></i></span>
                    </div>
                </div>
                <div class="col-md-3">
                    <label class="form-label fw-semibold">Vis dato</label>
                    <InputDate class="form-control" @bind-Value="_dateFilter" @bind-Value:after="ApplyFilters" />
                </div>
                <div class="col-md-2">
                    <label class="form-label fw-semibold">Status</label>
                    <select class="form-select" @bind="_statusFilter" @bind:after="ApplyFilters">
                        <option value="">Alle status</option>
                        <option value="Confirmed">Bekræftet</option>
                        <option value="CheckedIn">Checket Ind</option>
                        <option value="CheckedOut">Checket Ud</option>
                        <option value="Cancelled">Annulleret</option>
                    </select>
                </div>
                <div class="col-md-2">
                    <button class="btn btn-secondary w-100" @onclick="ClearFilters">Nulstil</button>
                </div>
            </div>
        </div>
    </div>

    <ul class="nav nav-tabs mb-3">
        <li class="nav-item">
            <button class="nav-link @(_activeTab == "arrivals" ? "active" : "")" @onclick='() => SetActiveTab("arrivals")'>Dagens Ankomster (@_arrivals.Count)</button>
        </li>
        <li class="nav-item">
            <button class="nav-link @(_activeTab == "departures" ? "active" : "")" @onclick='() => SetActiveTab("departures")'>Dagens Afrejser (@_departures.Count)</button>
        </li>
        <li class="nav-item">
            <button class="nav-link @(_activeTab == "all" ? "active" : "")" @onclick='() => SetActiveTab("all")'>Alle Bookinger (@GetVisibleBookings().Count)</button>
        </li>
    </ul>

    @if (_isLoading)
    {
        <p><em>Henter data...</em></p>
    }
    else
    {
        <div class="table-responsive">
            <table class="table table-hover align-middle">
                <thead>
                    <tr>
                        <th>Booking ID</th>
                        <th>Gæstenavn</th>
                        <th>Værelse</th>
                        <th>Check-in</th>
                        <th>Check-ud</th>
                        <th>Status</th>
                        <th class="text-end">Handlinger</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var booking in GetVisibleBookings())
                    {
                        <tr>
                            <td>#@booking.Id.Substring(0, 6).ToUpper()</td>
                            <td>@booking.GuestFullName</td>
                            <td>@booking.RoomTypeName</td>
                            <td>@booking.CheckInDate.ToString("dd/MM/yyyy")</td>
                            <td>@booking.CheckOutDate.ToString("dd/MM/yyyy")</td>
                            <td><span class="badge @GetStatusClass(booking.Status)">@booking.Status</span></td>
                            <td class="text-end">
                                <button class="btn btn-sm btn-icon"><i class="bi bi-eye-fill"></i></button>
                                <button class="btn btn-sm btn-icon"><i class="bi bi-pencil-fill"></i></button>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    }

    <AuthorizeView Roles="Manager">
        <h2 class="mt-5 mb-3">Manager Oversigt</h2>

        @if (_stats != null)
        {
            <div class="row mb-4">
                <div class="col-md-3"><div class="card text-center shadow-sm h-100"><div class="card-body"><i class="bi bi-box-arrow-in-right fs-1 text-primary"></i><h4 class="mt-2">@_stats.ArrivalsCount</h4><p class="text-muted mb-0">Ankomster</p></div></div></div>
                <div class="col-md-3"><div class="card text-center shadow-sm h-100"><div class="card-body"><i class="bi bi-box-arrow-left fs-1 text-primary"></i><h4 class="mt-2">@_stats.DeparturesCount</h4><p class="text-muted mb-0">Afrejser</p></div></div></div>
                <div class="col-md-3"><div class="card text-center shadow-sm h-100"><div class="card-body"><i class="bi bi-building fs-1 text-primary"></i><h4 class="mt-2">@_stats.OccupancyPercentage %</h4><p class="text-muted mb-0">Belægning</p></div></div></div>
                <div class="col-md-3"><div class="card text-center shadow-sm h-100"><div class="card-body"><i class="bi bi-cash-stack fs-1 text-primary"></i><h4 class="mt-2">@_stats.TodaysRevenue.ToString("N0") kr.</h4><p class="text-muted mb-0">Omsætning</p></div></div></div>
            </div>
        }

        <div class="row">
            <div class="col-md-6">
                <OpenTicketsList />
            </div>
            <div class="col-md-6">
                <div class="card">
                    <div class="card-header">Lukkede Support Sager</div>
                    <div class="card-body">
                        @if (_closedTickets == null)
                        {
                            <p><em>Indlæser...</em></p>
                        }
                        else if (!_closedTickets.Any())
                        {

                            <p>Ingen lukkede sager.</p>
                        }
                        else
                        {
                            <ul class="list-group list-group-flush">
                                @foreach (var ticket in _closedTickets)
                                {
                                    <li class="list-group-item">#@ticket.Id.Substring(0, 6).ToUpper() - @ticket.Title</li>
                                }
                            </ul>
                        }
                    </div>
                </div>
            </div>
        </div>
    </AuthorizeView>
</div>

@code {
    private bool _isLoading = true;
    private string _activeTab = "arrivals";

    private List<BookingSummaryDto> _allBookings = new();
    private List<BookingSummaryDto> _arrivals = new();
    private List<BookingSummaryDto> _departures = new();

    // Manager-specifik data
    private DailyStatsDto? _stats;
    private List<TicketSummaryDto>? _openTickets;
    private List<TicketSummaryDto>? _closedTickets;

    private string _searchTerm = "";
    private DateTime? _dateFilter;
    private string _statusFilter = "";

    [CascadingParameter]
    private Task<AuthenticationState> AuthStateTask { get; set; } = default!;

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthStateTask;
        var user = authState.User;

        var token = await ApiService.GetAuthTokenAsync();
        await SignalRService.StartConnectionAsync(token);
        SignalRService.OnNewTicketReceived += HandleNewTicketReceived;
        SignalRService.OnStatusChanged += HandleStatusChanged;

        _isLoading = true;

        var allBookingsTask = ApiService.GetBookingsForAdminAsync();
        Task<DailyStatsDto?>? statsTask = null;
        Task<List<TicketSummaryDto>?>? closedTicketsTask = null;

        if (user.IsInRole("Manager"))
        {
            statsTask = ApiService.GetDashboardStatsAsync();
            closedTicketsTask = ApiService.GetClosedTicketsForMyRoleAsync();
        }

        _allBookings = await allBookingsTask ?? new();
        if (statsTask != null) _stats = await statsTask;
        if (closedTicketsTask != null) _closedTickets = await closedTicketsTask ?? new();

        FilterLocalLists();
        _isLoading = false;
    }

    private async Task ReloadTickets()
    {
        _openTickets = await ApiService.GetOpenTicketsForMyRoleAsync();
        _closedTickets = await ApiService.GetClosedTicketsForMyRoleAsync();
        await InvokeAsync(StateHasChanged);
    }

    private async void HandleNewTicketReceived(TicketSummaryDto newTicket) => await ReloadTickets();
    private async void HandleStatusChanged(string ticketId, DomainModels.Enums.TicketStatus newStatus) => await ReloadTickets();

    private void SetActiveTab(string tabName) => _activeTab = tabName;

    private List<BookingSummaryDto> GetVisibleBookings()
    {
        var sourceList = _activeTab switch
        {
            "arrivals" => _arrivals,
            "departures" => _departures,
            _ => _allBookings
        };

        var filtered = sourceList.AsEnumerable();
        if (!string.IsNullOrEmpty(_searchTerm))
        {
            filtered = filtered.Where(b => b.GuestFullName.Contains(_searchTerm, StringComparison.OrdinalIgnoreCase) || b.Id.Contains(_searchTerm, StringComparison.OrdinalIgnoreCase));
        }
        if (!string.IsNullOrEmpty(_statusFilter))
        {
            filtered = filtered.Where(b => b.Status.Equals(_statusFilter, StringComparison.OrdinalIgnoreCase));
        }
        if (_dateFilter.HasValue)
        {
            filtered = filtered.Where(b => b.CheckInDate.Date <= _dateFilter.Value.Date && b.CheckOutDate.Date > _dateFilter.Value.Date);
        }

        return filtered.ToList();
    }

    private void FilterLocalLists()
    {
        var today = DateTime.UtcNow.Date;
        _arrivals = _allBookings.Where(b => b.CheckInDate.Date == today).ToList();
        _departures = _allBookings.Where(b => b.CheckOutDate.Date == today).ToList();
    }

    private async Task ApplyFilters() => await Task.CompletedTask;

    private async Task ClearFilters()
    {
        _searchTerm = "";
        _dateFilter = null;
        _statusFilter = "";
        await ApplyFilters();
    }

    private string GetStatusClass(string status) => status.ToLower() switch
    {
        "confirmed" => "bg-success",
        "checkedin" => "bg-info text-dark",
        "checkedout" => "bg-secondary",
        "cancelled" => "bg-danger",
        _ => "bg-dark"
    };

    private string GetTicketStatusClass(DomainModels.Enums.TicketStatus status) => status switch
    {
        DomainModels.Enums.TicketStatus.Open => "bg-success",
        DomainModels.Enums.TicketStatus.PendingSupportReply => "bg-info text-dark",
        DomainModels.Enums.TicketStatus.PendingCustomerReply => "bg-warning text-dark",
        DomainModels.Enums.TicketStatus.PendingClosure => "bg-danger",
        DomainModels.Enums.TicketStatus.Closed => "bg-secondary",
        _ => "bg-dark"
    };

    public void Dispose()
    {
        SignalRService.OnNewTicketReceived -= HandleNewTicketReceived;
        SignalRService.OnStatusChanged -= HandleStatusChanged;
    }
}