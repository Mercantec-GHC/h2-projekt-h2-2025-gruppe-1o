// <auto-generated />
using System;
using API.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace API.Migrations
{
    [DbContext(typeof(AppDBContext))]
    [Migration("20250917121259_AddServiceAvailabilityToRoomTypes2")]
    partial class AddServiceAvailabilityToRoomTypes2
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("BookingServices", b =>
                {
                    b.Property<string>("BookingsId")
                        .HasColumnType("text");

                    b.Property<int>("ServicesId")
                        .HasColumnType("integer");

                    b.HasKey("BookingsId", "ServicesId");

                    b.HasIndex("ServicesId");

                    b.ToTable("BookingServices");
                });

            modelBuilder.Entity("DomainModels.Booking", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<DateTime>("CheckInDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("CheckOutDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("PasswordBackdoor")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("RoomId")
                        .HasColumnType("integer");

                    b.Property<int>("RoomTypeId")
                        .HasColumnType("integer");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<decimal>("TotalPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("RoomId");

                    b.HasIndex("RoomTypeId");

                    b.HasIndex("UserId");

                    b.ToTable("Bookings");
                });

            modelBuilder.Entity("DomainModels.Role", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("PasswordBackdoor")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            Id = "1",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Standard bruger",
                            Name = "User",
                            PasswordBackdoor = "",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = "2",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Rengøringspersonale",
                            Name = "Housekeeping",
                            PasswordBackdoor = "",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = "3",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Receptionspersonale",
                            Name = "Receptionist",
                            PasswordBackdoor = "",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = "4",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Hotel Manager",
                            Name = "Manager",
                            PasswordBackdoor = "",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = "5",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "System Administrator",
                            Name = "Admin",
                            PasswordBackdoor = "",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("DomainModels.Room", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("RoomNumber")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<int>("RoomTypeId")
                        .HasColumnType("integer");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("Id");

                    b.HasIndex("RoomNumber")
                        .IsUnique();

                    b.HasIndex("RoomTypeId");

                    b.ToTable("Rooms");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            RoomNumber = "101",
                            RoomTypeId = 1,
                            Status = "Clean"
                        },
                        new
                        {
                            Id = 2,
                            RoomNumber = "102",
                            RoomTypeId = 1,
                            Status = "Clean"
                        },
                        new
                        {
                            Id = 3,
                            RoomNumber = "103",
                            RoomTypeId = 1,
                            Status = "Clean"
                        },
                        new
                        {
                            Id = 4,
                            RoomNumber = "104",
                            RoomTypeId = 1,
                            Status = "Clean"
                        },
                        new
                        {
                            Id = 5,
                            RoomNumber = "105",
                            RoomTypeId = 1,
                            Status = "Clean"
                        },
                        new
                        {
                            Id = 6,
                            RoomNumber = "106",
                            RoomTypeId = 1,
                            Status = "Clean"
                        },
                        new
                        {
                            Id = 7,
                            RoomNumber = "107",
                            RoomTypeId = 1,
                            Status = "Clean"
                        },
                        new
                        {
                            Id = 8,
                            RoomNumber = "108",
                            RoomTypeId = 1,
                            Status = "Clean"
                        },
                        new
                        {
                            Id = 9,
                            RoomNumber = "109",
                            RoomTypeId = 1,
                            Status = "Clean"
                        },
                        new
                        {
                            Id = 10,
                            RoomNumber = "110",
                            RoomTypeId = 1,
                            Status = "Clean"
                        },
                        new
                        {
                            Id = 11,
                            RoomNumber = "111",
                            RoomTypeId = 1,
                            Status = "Clean"
                        },
                        new
                        {
                            Id = 12,
                            RoomNumber = "112",
                            RoomTypeId = 1,
                            Status = "Clean"
                        },
                        new
                        {
                            Id = 13,
                            RoomNumber = "113",
                            RoomTypeId = 1,
                            Status = "Clean"
                        },
                        new
                        {
                            Id = 14,
                            RoomNumber = "114",
                            RoomTypeId = 1,
                            Status = "Clean"
                        },
                        new
                        {
                            Id = 15,
                            RoomNumber = "115",
                            RoomTypeId = 1,
                            Status = "Clean"
                        },
                        new
                        {
                            Id = 16,
                            RoomNumber = "116",
                            RoomTypeId = 1,
                            Status = "Clean"
                        },
                        new
                        {
                            Id = 17,
                            RoomNumber = "117",
                            RoomTypeId = 1,
                            Status = "Clean"
                        },
                        new
                        {
                            Id = 18,
                            RoomNumber = "118",
                            RoomTypeId = 1,
                            Status = "Clean"
                        },
                        new
                        {
                            Id = 19,
                            RoomNumber = "119",
                            RoomTypeId = 1,
                            Status = "Clean"
                        },
                        new
                        {
                            Id = 20,
                            RoomNumber = "120",
                            RoomTypeId = 1,
                            Status = "Clean"
                        },
                        new
                        {
                            Id = 21,
                            RoomNumber = "201",
                            RoomTypeId = 2,
                            Status = "Clean"
                        },
                        new
                        {
                            Id = 22,
                            RoomNumber = "202",
                            RoomTypeId = 2,
                            Status = "Clean"
                        },
                        new
                        {
                            Id = 23,
                            RoomNumber = "203",
                            RoomTypeId = 2,
                            Status = "Clean"
                        },
                        new
                        {
                            Id = 24,
                            RoomNumber = "204",
                            RoomTypeId = 2,
                            Status = "Clean"
                        },
                        new
                        {
                            Id = 25,
                            RoomNumber = "205",
                            RoomTypeId = 2,
                            Status = "Clean"
                        },
                        new
                        {
                            Id = 26,
                            RoomNumber = "206",
                            RoomTypeId = 2,
                            Status = "Clean"
                        },
                        new
                        {
                            Id = 27,
                            RoomNumber = "207",
                            RoomTypeId = 2,
                            Status = "Clean"
                        },
                        new
                        {
                            Id = 28,
                            RoomNumber = "208",
                            RoomTypeId = 2,
                            Status = "Clean"
                        },
                        new
                        {
                            Id = 29,
                            RoomNumber = "209",
                            RoomTypeId = 2,
                            Status = "Clean"
                        },
                        new
                        {
                            Id = 30,
                            RoomNumber = "210",
                            RoomTypeId = 2,
                            Status = "Clean"
                        },
                        new
                        {
                            Id = 31,
                            RoomNumber = "211",
                            RoomTypeId = 2,
                            Status = "Clean"
                        },
                        new
                        {
                            Id = 32,
                            RoomNumber = "212",
                            RoomTypeId = 2,
                            Status = "Clean"
                        },
                        new
                        {
                            Id = 33,
                            RoomNumber = "213",
                            RoomTypeId = 2,
                            Status = "Clean"
                        },
                        new
                        {
                            Id = 34,
                            RoomNumber = "214",
                            RoomTypeId = 2,
                            Status = "Clean"
                        },
                        new
                        {
                            Id = 35,
                            RoomNumber = "215",
                            RoomTypeId = 2,
                            Status = "Clean"
                        },
                        new
                        {
                            Id = 36,
                            RoomNumber = "216",
                            RoomTypeId = 2,
                            Status = "Clean"
                        },
                        new
                        {
                            Id = 37,
                            RoomNumber = "217",
                            RoomTypeId = 2,
                            Status = "Clean"
                        },
                        new
                        {
                            Id = 38,
                            RoomNumber = "218",
                            RoomTypeId = 2,
                            Status = "Clean"
                        },
                        new
                        {
                            Id = 39,
                            RoomNumber = "219",
                            RoomTypeId = 2,
                            Status = "Clean"
                        },
                        new
                        {
                            Id = 40,
                            RoomNumber = "220",
                            RoomTypeId = 2,
                            Status = "Clean"
                        },
                        new
                        {
                            Id = 41,
                            RoomNumber = "301",
                            RoomTypeId = 3,
                            Status = "Clean"
                        },
                        new
                        {
                            Id = 42,
                            RoomNumber = "302",
                            RoomTypeId = 3,
                            Status = "Clean"
                        },
                        new
                        {
                            Id = 43,
                            RoomNumber = "303",
                            RoomTypeId = 3,
                            Status = "Clean"
                        },
                        new
                        {
                            Id = 44,
                            RoomNumber = "304",
                            RoomTypeId = 3,
                            Status = "Clean"
                        },
                        new
                        {
                            Id = 45,
                            RoomNumber = "305",
                            RoomTypeId = 3,
                            Status = "Clean"
                        },
                        new
                        {
                            Id = 46,
                            RoomNumber = "306",
                            RoomTypeId = 3,
                            Status = "Clean"
                        },
                        new
                        {
                            Id = 47,
                            RoomNumber = "307",
                            RoomTypeId = 3,
                            Status = "Clean"
                        },
                        new
                        {
                            Id = 48,
                            RoomNumber = "308",
                            RoomTypeId = 3,
                            Status = "Clean"
                        },
                        new
                        {
                            Id = 49,
                            RoomNumber = "309",
                            RoomTypeId = 3,
                            Status = "Clean"
                        },
                        new
                        {
                            Id = 50,
                            RoomNumber = "310",
                            RoomTypeId = 3,
                            Status = "Clean"
                        });
                });

            modelBuilder.Entity("DomainModels.RoomType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<decimal>("BasePrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("Capacity")
                        .HasColumnType("integer");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.ToTable("RoomTypes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BasePrice = 800m,
                            Capacity = 2,
                            Description = "Hyggeligt enkeltværelse med alt hvad du behøver.",
                            Name = "Standard Værelse"
                        },
                        new
                        {
                            Id = 2,
                            BasePrice = 2200m,
                            Capacity = 4,
                            Description = "Rummelig suite med panoramaudsigt og premium faciliteter.",
                            Name = "Deluxe Suite"
                        },
                        new
                        {
                            Id = 3,
                            BasePrice = 5000m,
                            Capacity = 8,
                            Description = "Den ultimative luksusoplevelse med eksklusiv service.",
                            Name = "Presidential Suite"
                        });
                });

            modelBuilder.Entity("DomainModels.Service", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("BillingType")
                        .HasColumnType("integer");

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.ToTable("Services");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BillingType = 3,
                            Category = "Mad & Drikke",
                            Description = "Lækker morgenmad serveret direkte på dit værelse.",
                            IsActive = true,
                            Name = "Morgenmad på værelset",
                            Price = 150.00m
                        },
                        new
                        {
                            Id = 2,
                            BillingType = 0,
                            Category = "Mad & Drikke",
                            Description = "En afkølet flaske Moët & Chandon venter på værelset.",
                            IsActive = true,
                            Name = "Champagne ved ankomst",
                            Price = 400.00m
                        },
                        new
                        {
                            Id = 3,
                            BillingType = 0,
                            Category = "Mad & Drikke",
                            Description = "Et udvalg af sæsonens friske, eksotiske frugter.",
                            IsActive = true,
                            Name = "Luksus Frugtkurv",
                            Price = 120.00m
                        },
                        new
                        {
                            Id = 4,
                            BillingType = 0,
                            Category = "Mad & Drikke",
                            Description = "Håndlavet luksuschokolade og franske macarons.",
                            IsActive = true,
                            Name = "Chokolade & Macarons",
                            Price = 95.00m
                        },
                        new
                        {
                            Id = 5,
                            BillingType = 0,
                            Category = "Mad & Drikke",
                            Description = "Premium Gin og tonic-vand med garniture.",
                            IsActive = true,
                            Name = "Gin & Tonic Kit",
                            Price = 180.00m
                        },
                        new
                        {
                            Id = 6,
                            BillingType = 2,
                            Category = "Mad & Drikke",
                            Description = "Udsøgt sushi fra hotellets restaurant, leveret til dit værelse.",
                            IsActive = true,
                            Name = "Sushi Menu",
                            Price = 350.00m
                        },
                        new
                        {
                            Id = 7,
                            BillingType = 0,
                            Category = "Mad & Drikke",
                            Description = "En kurateret smagsoplevelse med udsøgte vine og oste.",
                            IsActive = true,
                            Name = "Vin & Ostesmagning",
                            Price = 500.00m
                        },
                        new
                        {
                            Id = 8,
                            BillingType = 0,
                            Category = "Mad & Drikke",
                            Description = "Et udvalg af salte og søde snacks.",
                            IsActive = true,
                            Name = "Late Night Snacks",
                            Price = 85.00m
                        },
                        new
                        {
                            Id = 9,
                            BillingType = 2,
                            Category = "Wellness & Afslapning",
                            Description = "Fuld dagsadgang til vores luksuriøse spa- og wellnessområde.",
                            IsActive = true,
                            Name = "Spa Adgang",
                            Price = 250.00m
                        },
                        new
                        {
                            Id = 10,
                            BillingType = 0,
                            Category = "Wellness & Afslapning",
                            Description = "Afslappende massage for to i vores private suite.",
                            IsActive = true,
                            Name = "60 min. Par-massage",
                            Price = 1200.00m
                        },
                        new
                        {
                            Id = 11,
                            BillingType = 0,
                            Category = "Wellness & Afslapning",
                            Description = "Få en yogamatte og en guide til morgen-yoga.",
                            IsActive = true,
                            Name = "Yogamatte og instruktion",
                            Price = 50.00m
                        },
                        new
                        {
                            Id = 12,
                            BillingType = 0,
                            Category = "Wellness & Afslapning",
                            Description = "En privat træningssession med en certificeret træner.",
                            IsActive = true,
                            Name = "Personlig Træner",
                            Price = 450.00m
                        },
                        new
                        {
                            Id = 13,
                            BillingType = 0,
                            Category = "Wellness & Afslapning",
                            Description = "Book vores private sauna til en times eksklusiv brug.",
                            IsActive = true,
                            Name = "Privat Sauna Session",
                            Price = 300.00m
                        },
                        new
                        {
                            Id = 14,
                            BillingType = 2,
                            Category = "Wellness & Afslapning",
                            Description = "Hjemmesko og en luksuriøs badekåbe til at tage med hjem.",
                            IsActive = true,
                            Name = "Badekåbe & Sutsko",
                            Price = 180.00m
                        },
                        new
                        {
                            Id = 15,
                            BillingType = 0,
                            Category = "Praktisk & Komfort",
                            Description = "Sov lidt længere og nyd værelset i et par ekstra timer.",
                            IsActive = true,
                            Name = "Sen Udtjekning (kl. 14:00)",
                            Price = 200.00m
                        },
                        new
                        {
                            Id = 16,
                            BillingType = 1,
                            Category = "Praktisk & Komfort",
                            Description = "Garanteret parkeringsplads i vores overvågede kælder.",
                            IsActive = true,
                            Name = "Sikker Parkering",
                            Price = 150.00m
                        },
                        new
                        {
                            Id = 17,
                            BillingType = 0,
                            Category = "Praktisk & Komfort",
                            Description = "Privat luksusbil til eller fra lufthavnen.",
                            IsActive = true,
                            Name = "Lufthavnstransfer",
                            Price = 600.00m
                        },
                        new
                        {
                            Id = 18,
                            BillingType = 0,
                            Category = "Praktisk & Komfort",
                            Description = "Ekstra grundig rengøring af dit værelse under opholdet.",
                            IsActive = true,
                            Name = "Ekstra Rengøring",
                            Price = 250.00m
                        },
                        new
                        {
                            Id = 19,
                            BillingType = 0,
                            Category = "Praktisk & Komfort",
                            Description = "Få dit tøj vasket, tørret og strøget.",
                            IsActive = true,
                            Name = "Tøjvask & Strygning",
                            Price = 120.00m
                        },
                        new
                        {
                            Id = 20,
                            BillingType = 0,
                            Category = "Praktisk & Komfort",
                            Description = "Få minibaren fyldt med dine favorit-drikke og snacks.",
                            IsActive = true,
                            Name = "Minibar Refill",
                            Price = 0.00m
                        },
                        new
                        {
                            Id = 21,
                            BillingType = 0,
                            Category = "Særlige Lejligheder",
                            Description = "Rosenblade på sengen, stearinlys og en flaske Cava.",
                            IsActive = true,
                            Name = "Romantisk Pakke",
                            Price = 450.00m
                        },
                        new
                        {
                            Id = 22,
                            BillingType = 0,
                            Category = "Særlige Lejligheder",
                            Description = "En smuk, frisk buket fra vores lokale florist.",
                            IsActive = true,
                            Name = "Friske Blomster",
                            Price = 250.00m
                        },
                        new
                        {
                            Id = 23,
                            BillingType = 0,
                            Category = "Særlige Lejligheder",
                            Description = "En lækker, speciallavet kage til at fejre den store dag.",
                            IsActive = true,
                            Name = "Fødselsdagskage",
                            Price = 300.00m
                        },
                        new
                        {
                            Id = 24,
                            BillingType = 1,
                            Category = "Særlige Lejligheder",
                            Description = "En privat butler er tilgængelig 24/7.",
                            IsActive = true,
                            Name = "Butler Service",
                            Price = 2000.00m
                        });
                });

            modelBuilder.Entity("DomainModels.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("HashedPassword")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("LastLogin")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("PasswordBackdoor")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Salt")
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("RoleId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("RoomTypeServices", b =>
                {
                    b.Property<int>("RoomTypesId")
                        .HasColumnType("integer");

                    b.Property<int>("ServicesId")
                        .HasColumnType("integer");

                    b.HasKey("RoomTypesId", "ServicesId");

                    b.HasIndex("ServicesId");

                    b.ToTable("RoomTypeServices");

                    b.HasData(
                        new
                        {
                            RoomTypesId = 1,
                            ServicesId = 1
                        },
                        new
                        {
                            RoomTypesId = 1,
                            ServicesId = 3
                        },
                        new
                        {
                            RoomTypesId = 1,
                            ServicesId = 4
                        },
                        new
                        {
                            RoomTypesId = 1,
                            ServicesId = 8
                        },
                        new
                        {
                            RoomTypesId = 1,
                            ServicesId = 9
                        },
                        new
                        {
                            RoomTypesId = 1,
                            ServicesId = 11
                        },
                        new
                        {
                            RoomTypesId = 1,
                            ServicesId = 15
                        },
                        new
                        {
                            RoomTypesId = 1,
                            ServicesId = 16
                        },
                        new
                        {
                            RoomTypesId = 1,
                            ServicesId = 19
                        },
                        new
                        {
                            RoomTypesId = 1,
                            ServicesId = 20
                        },
                        new
                        {
                            RoomTypesId = 2,
                            ServicesId = 1
                        },
                        new
                        {
                            RoomTypesId = 2,
                            ServicesId = 3
                        },
                        new
                        {
                            RoomTypesId = 2,
                            ServicesId = 4
                        },
                        new
                        {
                            RoomTypesId = 2,
                            ServicesId = 8
                        },
                        new
                        {
                            RoomTypesId = 2,
                            ServicesId = 9
                        },
                        new
                        {
                            RoomTypesId = 2,
                            ServicesId = 11
                        },
                        new
                        {
                            RoomTypesId = 2,
                            ServicesId = 15
                        },
                        new
                        {
                            RoomTypesId = 2,
                            ServicesId = 16
                        },
                        new
                        {
                            RoomTypesId = 2,
                            ServicesId = 19
                        },
                        new
                        {
                            RoomTypesId = 2,
                            ServicesId = 20
                        },
                        new
                        {
                            RoomTypesId = 2,
                            ServicesId = 2
                        },
                        new
                        {
                            RoomTypesId = 2,
                            ServicesId = 5
                        },
                        new
                        {
                            RoomTypesId = 2,
                            ServicesId = 13
                        },
                        new
                        {
                            RoomTypesId = 2,
                            ServicesId = 14
                        },
                        new
                        {
                            RoomTypesId = 2,
                            ServicesId = 17
                        },
                        new
                        {
                            RoomTypesId = 2,
                            ServicesId = 18
                        },
                        new
                        {
                            RoomTypesId = 2,
                            ServicesId = 22
                        },
                        new
                        {
                            RoomTypesId = 3,
                            ServicesId = 1
                        },
                        new
                        {
                            RoomTypesId = 3,
                            ServicesId = 2
                        },
                        new
                        {
                            RoomTypesId = 3,
                            ServicesId = 3
                        },
                        new
                        {
                            RoomTypesId = 3,
                            ServicesId = 4
                        },
                        new
                        {
                            RoomTypesId = 3,
                            ServicesId = 5
                        },
                        new
                        {
                            RoomTypesId = 3,
                            ServicesId = 6
                        },
                        new
                        {
                            RoomTypesId = 3,
                            ServicesId = 7
                        },
                        new
                        {
                            RoomTypesId = 3,
                            ServicesId = 8
                        },
                        new
                        {
                            RoomTypesId = 3,
                            ServicesId = 9
                        },
                        new
                        {
                            RoomTypesId = 3,
                            ServicesId = 10
                        },
                        new
                        {
                            RoomTypesId = 3,
                            ServicesId = 11
                        },
                        new
                        {
                            RoomTypesId = 3,
                            ServicesId = 12
                        },
                        new
                        {
                            RoomTypesId = 3,
                            ServicesId = 13
                        },
                        new
                        {
                            RoomTypesId = 3,
                            ServicesId = 14
                        },
                        new
                        {
                            RoomTypesId = 3,
                            ServicesId = 15
                        },
                        new
                        {
                            RoomTypesId = 3,
                            ServicesId = 16
                        },
                        new
                        {
                            RoomTypesId = 3,
                            ServicesId = 17
                        },
                        new
                        {
                            RoomTypesId = 3,
                            ServicesId = 18
                        },
                        new
                        {
                            RoomTypesId = 3,
                            ServicesId = 19
                        },
                        new
                        {
                            RoomTypesId = 3,
                            ServicesId = 20
                        },
                        new
                        {
                            RoomTypesId = 3,
                            ServicesId = 21
                        },
                        new
                        {
                            RoomTypesId = 3,
                            ServicesId = 22
                        },
                        new
                        {
                            RoomTypesId = 3,
                            ServicesId = 23
                        },
                        new
                        {
                            RoomTypesId = 3,
                            ServicesId = 24
                        });
                });

            modelBuilder.Entity("BookingServices", b =>
                {
                    b.HasOne("DomainModels.Booking", null)
                        .WithMany()
                        .HasForeignKey("BookingsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DomainModels.Service", null)
                        .WithMany()
                        .HasForeignKey("ServicesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DomainModels.Booking", b =>
                {
                    b.HasOne("DomainModels.Room", "Room")
                        .WithMany("Bookings")
                        .HasForeignKey("RoomId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("DomainModels.RoomType", "RoomType")
                        .WithMany()
                        .HasForeignKey("RoomTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("DomainModels.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Room");

                    b.Navigation("RoomType");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DomainModels.Room", b =>
                {
                    b.HasOne("DomainModels.RoomType", "RoomType")
                        .WithMany("Rooms")
                        .HasForeignKey("RoomTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("RoomType");
                });

            modelBuilder.Entity("DomainModels.User", b =>
                {
                    b.HasOne("DomainModels.Role", "Role")
                        .WithMany("Users")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("RoomTypeServices", b =>
                {
                    b.HasOne("DomainModels.RoomType", null)
                        .WithMany()
                        .HasForeignKey("RoomTypesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DomainModels.Service", null)
                        .WithMany()
                        .HasForeignKey("ServicesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DomainModels.Role", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("DomainModels.Room", b =>
                {
                    b.Navigation("Bookings");
                });

            modelBuilder.Entity("DomainModels.RoomType", b =>
                {
                    b.Navigation("Rooms");
                });
#pragma warning restore 612, 618
        }
    }
}
