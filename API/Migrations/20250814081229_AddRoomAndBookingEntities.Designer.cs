// <auto-generated />
using System;
using API.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace API.Migrations
{
    [DbContext(typeof(AppDBContext))]
    [Migration("20250814081229_AddRoomAndBookingEntities")]
    partial class AddRoomAndBookingEntities
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("DomainModels.Booking", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<DateTime>("CheckInDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("CheckOutDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("RoomId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<decimal>("TotalPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("RoomId");

                    b.HasIndex("UserId");

                    b.ToTable("Bookings");
                });

            modelBuilder.Entity("DomainModels.Role", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            Id = "1",
                            CreatedAt = new DateTime(2025, 1, 1, 10, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Standard bruger med basis rettigheder",
                            Name = "User",
                            UpdatedAt = new DateTime(2025, 1, 1, 10, 0, 0, 0, DateTimeKind.Utc)
                        },
                        new
                        {
                            Id = "2",
                            CreatedAt = new DateTime(2025, 1, 1, 10, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Rengøringspersonale med adgang til rengøringsmoduler",
                            Name = "CleaningStaff",
                            UpdatedAt = new DateTime(2025, 1, 1, 10, 0, 0, 0, DateTimeKind.Utc)
                        },
                        new
                        {
                            Id = "3",
                            CreatedAt = new DateTime(2025, 1, 1, 10, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Receptionspersonale med adgang til booking og gæster",
                            Name = "Reception",
                            UpdatedAt = new DateTime(2025, 1, 1, 10, 0, 0, 0, DateTimeKind.Utc)
                        },
                        new
                        {
                            Id = "4",
                            CreatedAt = new DateTime(2025, 1, 1, 10, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Administrator med fuld adgang til systemet",
                            Name = "Admin",
                            UpdatedAt = new DateTime(2025, 1, 1, 10, 0, 0, 0, DateTimeKind.Utc)
                        });
                });

            modelBuilder.Entity("DomainModels.Room", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<decimal>("PricePerNight")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("RoomNumber")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("RoomNumber")
                        .IsUnique();

                    b.ToTable("Rooms");

                    b.HasData(
                        new
                        {
                            Id = "8cddeb60-5944-4fc2-a720-e14441c036f6",
                            CreatedAt = new DateTime(2025, 8, 14, 8, 12, 29, 472, DateTimeKind.Utc).AddTicks(4733),
                            Description = "Hyggeligt enkeltværelse med udsigt over gården.",
                            PricePerNight = 800m,
                            RoomNumber = "101",
                            Type = "Single",
                            UpdatedAt = new DateTime(2025, 8, 14, 8, 12, 29, 472, DateTimeKind.Utc).AddTicks(4734)
                        },
                        new
                        {
                            Id = "91aa791f-39b5-4128-bd03-e5a78592fcc0",
                            CreatedAt = new DateTime(2025, 8, 14, 8, 12, 29, 472, DateTimeKind.Utc).AddTicks(4757),
                            Description = "Hyggeligt enkeltværelse med udsigt over gården.",
                            PricePerNight = 800m,
                            RoomNumber = "102",
                            Type = "Single",
                            UpdatedAt = new DateTime(2025, 8, 14, 8, 12, 29, 472, DateTimeKind.Utc).AddTicks(4757)
                        },
                        new
                        {
                            Id = "4c8deffd-d269-4ceb-9148-49ac966598cc",
                            CreatedAt = new DateTime(2025, 8, 14, 8, 12, 29, 472, DateTimeKind.Utc).AddTicks(4759),
                            Description = "Rummeligt dobbeltværelse med balkon.",
                            PricePerNight = 1200m,
                            RoomNumber = "201",
                            Type = "Double",
                            UpdatedAt = new DateTime(2025, 8, 14, 8, 12, 29, 472, DateTimeKind.Utc).AddTicks(4760)
                        },
                        new
                        {
                            Id = "bc04bf05-9bad-4619-b3c3-4d5171b0fd48",
                            CreatedAt = new DateTime(2025, 8, 14, 8, 12, 29, 472, DateTimeKind.Utc).AddTicks(4761),
                            Description = "Rummeligt dobbeltværelse med balkon.",
                            PricePerNight = 1200m,
                            RoomNumber = "202",
                            Type = "Double",
                            UpdatedAt = new DateTime(2025, 8, 14, 8, 12, 29, 472, DateTimeKind.Utc).AddTicks(4762)
                        },
                        new
                        {
                            Id = "24492a37-7a9a-4b5a-a8b0-f19fce657397",
                            CreatedAt = new DateTime(2025, 8, 14, 8, 12, 29, 472, DateTimeKind.Utc).AddTicks(4763),
                            Description = "Luksuriøs suite med separat stue og havudsigt.",
                            PricePerNight = 2500m,
                            RoomNumber = "301",
                            Type = "Suite",
                            UpdatedAt = new DateTime(2025, 8, 14, 8, 12, 29, 472, DateTimeKind.Utc).AddTicks(4764)
                        });
                });

            modelBuilder.Entity("DomainModels.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("HashedPassword")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("LastLogin")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("PasswordBackdoor")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Salt")
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("RoleId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("DomainModels.Booking", b =>
                {
                    b.HasOne("DomainModels.Room", "Room")
                        .WithMany("Bookings")
                        .HasForeignKey("RoomId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("DomainModels.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Room");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DomainModels.User", b =>
                {
                    b.HasOne("DomainModels.Role", "Role")
                        .WithMany("Users")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("DomainModels.Role", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("DomainModels.Room", b =>
                {
                    b.Navigation("Bookings");
                });
#pragma warning restore 612, 618
        }
    }
}
